#! /usr/bin/env python

import sys, re
from pyoro import Oro, OroServerError

from threading import Thread
from datetime import datetime, timedelta
from Queue import Queue

HOST = "localhost"
PORT = 6969

threads_list = {"8661267":"situation assessment", 
                "30270451": "execution control",
                "22602990": "execution control",
                "3617540": "planning",
                "15366973": "execution control",
                "8050864": "execution control",
                "7343097": "execution control",
                "2524060": "planning",
                "19164655": "planning",
                "18965188": "planning",
                "3225702": "dialogue",
                "407906873":"dialogue",
                "1588995760": "execution control",
                "283029269":"dialogue",
                "2104083528": "execution control",
                "149996900": "execution control",
                "486624974": "execution control"
                }
def total_seconds(td):
    return (td.microseconds + (td.seconds + td.days * 24 * 3600) * 10**6) / 10**6


requests = []

nb_lines = 0
current_line = 0

start_time = None
end_time = None


line_nb=0

print "[PARSING THE LOG...]"
time = None

with open(sys.argv[1], 'r') as f:
    for l in f.readlines():

        cmd_line = re.search("(\d+ [.:\d]+) thread (\d+)",l)

        if cmd_line:
            time = datetime.strptime(cmd_line.group(1), "%Y%m%d %H:%M:%S.%f")

            if not start_time:
                # Initializes the start time at the first encountered
                # timestamp
                start_time = time

            thread_id = cmd_line.group(2)
        else:
            # Try to look for the thread number without timestamp
            cmd_line = re.search("(?<=thread )\d+",l)
            if cmd_line:
                thread_id = cmd_line.group(0)

                time = datetime.now() # Default date if not found in the log
                if not start_time:
                    # Initializes the start time at the first timestamp
                    start_time = datetime.now()
            else:
                #Not a log line with a request content
                continue

        line_nb += 1
        req = re.search("(?<=Got incoming request: ).+", l).group(0)
        if thread_id not in threads_list.keys():
            print "Unknown thread " + thread_id
            threads_list[thread_id] = "unknown"

        #threads_list[thread_id] += (time - start_time, req)
        requests.append((time - start_time, threads_list[thread_id], req))


nb_lines = line_nb

if nb_lines == 0:
    print("No ORO requests found. Are you sure you're parsing a ORO-server log?")
    sys.exit(0)

end_time = time

timespan = end_time - start_time
print "[PARSING OF THE LOG FINISHED. " + str(nb_lines) + " REQUESTS IN " + \
       str(timespan) + \
       "sec.]\n\n\n"

timeslice = 60 #seconds

events_per_slices = {}
for e in requests:
    time, thread, req = e
    events_per_slices.setdefault(total_seconds(time) // timeslice, [])
    events_per_slices[total_seconds(time) // timeslice].append((thread, req))

for time, events in events_per_slices.items():
    print("At slice %s: %s events" % (time, len(events)))


print("-----------------------------")


events_per_thread = {}
for e in requests:
    time, thread, req = e
    events_per_thread.setdefault(thread, [])
    events_per_thread[thread].append(req)

for thread, events in events_per_thread.items():
    print("Module %s: %s events" % (thread, len(events)))


print("-----------------------------")


for time, events in events_per_slices.items():
    print("At slice %s: %s events" % (time, len(events)))
    events_per_thread = {}
    for e in events:
        thread, req = e
        events_per_thread.setdefault(thread, [])
        events_per_thread[thread].append(req)

    for thread, events in events_per_thread.items():
        print("\t- %s: %s events" % (thread, len(events)))

stacked = True
with open("log.plt", "w") as f:
    f.write('set xlabel "Time (%s sec. sampling slices)"\n' % timeslice)
    f.write('set ylabel "Activity (interactions / sec)"\n')
    f.write("set terminal pngcairo size 800,600 enhanced font 'Verdana,10'\n")
    f.write("set output 'knowledge_streams.png'\n")
    f.write("set style line 1 linetype 1 pointtype 0 linewidth 1 linecolor rgb '#469400'\n")
    f.write("set style line 2 linetype 2 pointtype 0 linewidth 1 linecolor rgb '#f13c76'\n")
    f.write("set style line 3 linetype 3 pointtype 0 linewidth 1 linecolor rgb '#a62d00'\n")
    f.write("set style line 4 linetype 4 pointtype 0 linewidth 1 linecolor rgb '#00733e'\n")

    if stacked:
        f.write('plot "log.dat" using 1:5 title "Execution control" with filledcurves x1 linestyle 4,"log.dat" using 1:4 title "Speech understanding" with filledcurves x1 linestyle 3,"log.dat" using 1:3 title "Planning" with filledcurves x1 linestyle 2, "log.dat" using 1:2 title "Situation assessment" with filledcurves x1 linestyle 1\n')
    else:
        f.write('plot "log.dat" using 1:4 title "Speech understanding" with lines, "log.dat" using 1:5 title "Execution control" with lines, "log.dat" using 1:3 title "Planning" with lines, "log.dat" using 1:2 title "Situation assessment" with lines\n')
    #f.write("pause -1\n")


with open("log.dat", "w") as f:
    f.write("# slice\tdialog\texecution\tplanning\tsituation assessment\n")
    for time, events in events_per_slices.items():
        events_per_thread = {}
        for e in events:
            thread, req = e
            events_per_thread.setdefault(thread, [])
            events_per_thread[thread].append(req)

            e_lang = events_per_thread.setdefault("dialogue", [])
            #language = len(e_lang) * sum([len(r) for r in e_lang]) / float(timeslice)
            #language = sum([len(r) for r in e_lang]) / float(timeslice)
            language = len(e_lang) / float(timeslice)


            e_ctl = events_per_thread.setdefault("execution control", [])
            #control = len(e_ctl) * sum([len(r) for r in e_ctl]) / float(timeslice)
            #control = sum([len(r) for r in e_ctl]) / float(timeslice)
            control = len(e_ctl) / float(timeslice)


            e_plan = events_per_thread.setdefault("planning", [])
            #planning = len(e_plan) * sum([len(r) for r in e_plan]) / float(timeslice)
            #planning = sum([len(r) for r in e_plan]) / float(timeslice)
            planning = len(e_plan) / float(timeslice)



            e_sit = events_per_thread.setdefault("situation assessment", [])
            #sitass = len(e_sit) * sum([len(r) for r in e_sit]) / float(timeslice)
            #sitass = sum([len(r) for r in e_sit]) / float(timeslice)
            sitass = len(e_sit) / float(timeslice)


        if stacked:
            f.write("%s\t%s\t%s\t%s\t%s\n" % (time, sitass, planning + sitass, language + planning + sitass, control + language + planning + sitass))
        else:
            f.write("%s\t%s\t%s\t%s\t%s\n" % (time, sitass, planning, language, control))


