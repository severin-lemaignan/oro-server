/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.35
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package yarp;

public class Thread {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected Thread(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Thread obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if(swigCPtr != 0 && swigCMemOwn) {
      swigCMemOwn = false;
      yarpJNI.delete_Thread(swigCPtr);
    }
    swigCPtr = 0;
  }

  public void run() {
    yarpJNI.Thread_run(swigCPtr, this);
  }

  public void onStop() {
    yarpJNI.Thread_onStop(swigCPtr, this);
  }

  public boolean start() {
    return yarpJNI.Thread_start(swigCPtr, this);
  }

  public boolean stop() {
    return yarpJNI.Thread_stop(swigCPtr, this);
  }

  public void beforeStart() {
    yarpJNI.Thread_beforeStart(swigCPtr, this);
  }

  public void afterStart(boolean success) {
    yarpJNI.Thread_afterStart(swigCPtr, this, success);
  }

  public boolean threadInit() {
    return yarpJNI.Thread_threadInit(swigCPtr, this);
  }

  public void threadRelease() {
    yarpJNI.Thread_threadRelease(swigCPtr, this);
  }

  public boolean isStopping() {
    return yarpJNI.Thread_isStopping(swigCPtr, this);
  }

  public boolean isRunning() {
    return yarpJNI.Thread_isRunning(swigCPtr, this);
  }

  public void setOptions(int stackSize) {
    yarpJNI.Thread_setOptions__SWIG_0(swigCPtr, this, stackSize);
  }

  public void setOptions() {
    yarpJNI.Thread_setOptions__SWIG_1(swigCPtr, this);
  }

  public static int getCount() {
    return yarpJNI.Thread_getCount();
  }

  public int getKey() {
    return yarpJNI.Thread_getKey(swigCPtr, this);
  }

  public int setPriority(int priority) {
    return yarpJNI.Thread_setPriority(swigCPtr, this, priority);
  }

  public int getPriority() {
    return yarpJNI.Thread_getPriority(swigCPtr, this);
  }

}
