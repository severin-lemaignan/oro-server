/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.35
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package yarp;

class yarpJNI {
  public final static native long new_ConstString__SWIG_0();
  public final static native long new_ConstString__SWIG_1(String jarg1);
  public final static native void delete_ConstString(long jarg1);
  public final static native long new_ConstString__SWIG_2(long jarg1, ConstString jarg1_);
  public final static native String ConstString_c_str(long jarg1, ConstString jarg1_);
  public final static native String ConstString_toString(long jarg1, ConstString jarg1_);
  public final static native boolean ConstString_isEqual__SWIG_0(long jarg1, ConstString jarg1_, long jarg2, ConstString jarg2_);
  public final static native boolean ConstString_notEqual__SWIG_0(long jarg1, ConstString jarg1_, long jarg2, ConstString jarg2_);
  public final static native boolean ConstString_isEqual__SWIG_1(long jarg1, ConstString jarg1_, String jarg2);
  public final static native boolean ConstString_notEqual__SWIG_1(long jarg1, ConstString jarg1_, String jarg2);
  public final static native int ConstString_length(long jarg1, ConstString jarg1_);
  public final static native long new_PortInfo();
  public final static native int PortInfo_PORTINFO_NULL_get();
  public final static native int PortInfo_PORTINFO_CONNECTION_get();
  public final static native int PortInfo_PORTINFO_MISC_get();
  public final static native void PortInfo_tag_set(long jarg1, PortInfo jarg1_, int jarg2);
  public final static native int PortInfo_tag_get(long jarg1, PortInfo jarg1_);
  public final static native void PortInfo_incoming_set(long jarg1, PortInfo jarg1_, boolean jarg2);
  public final static native boolean PortInfo_incoming_get(long jarg1, PortInfo jarg1_);
  public final static native void PortInfo_created_set(long jarg1, PortInfo jarg1_, boolean jarg2);
  public final static native boolean PortInfo_created_get(long jarg1, PortInfo jarg1_);
  public final static native void PortInfo_portName_set(long jarg1, PortInfo jarg1_, long jarg2, ConstString jarg2_);
  public final static native long PortInfo_portName_get(long jarg1, PortInfo jarg1_);
  public final static native void PortInfo_sourceName_set(long jarg1, PortInfo jarg1_, long jarg2, ConstString jarg2_);
  public final static native long PortInfo_sourceName_get(long jarg1, PortInfo jarg1_);
  public final static native void PortInfo_targetName_set(long jarg1, PortInfo jarg1_, long jarg2, ConstString jarg2_);
  public final static native long PortInfo_targetName_get(long jarg1, PortInfo jarg1_);
  public final static native void PortInfo_carrierName_set(long jarg1, PortInfo jarg1_, long jarg2, ConstString jarg2_);
  public final static native long PortInfo_carrierName_get(long jarg1, PortInfo jarg1_);
  public final static native void PortInfo_message_set(long jarg1, PortInfo jarg1_, long jarg2, ConstString jarg2_);
  public final static native long PortInfo_message_get(long jarg1, PortInfo jarg1_);
  public final static native void delete_PortInfo(long jarg1);
  public final static native void delete_PortReport(long jarg1);
  public final static native void PortReport_report(long jarg1, PortReport jarg1_, long jarg2, PortInfo jarg2_);
  public final static native long Contact_empty();
  public final static native long Contact_invalid();
  public final static native long Contact_byName(String jarg1);
  public final static native long Contact_byCarrier(String jarg1);
  public final static native long Contact_byConfig(long jarg1);
  public final static native long Contact_addCarrier(long jarg1, Contact jarg1_, String jarg2);
  public final static native long Contact_bySocket(String jarg1, String jarg2, int jarg3);
  public final static native long Contact_addSocket(long jarg1, Contact jarg1_, String jarg2, String jarg3, int jarg4);
  public final static native long new_Contact__SWIG_0(long jarg1, Contact jarg1_);
  public final static native void delete_Contact(long jarg1);
  public final static native long Contact_getName(long jarg1, Contact jarg1_);
  public final static native long Contact_getHost(long jarg1, Contact jarg1_);
  public final static native long Contact_getCarrier(long jarg1, Contact jarg1_);
  public final static native int Contact_getPort(long jarg1, Contact jarg1_);
  public final static native long Contact_toString_c(long jarg1, Contact jarg1_);
  public final static native boolean Contact_isValid(long jarg1, Contact jarg1_);
  public final static native long new_Contact__SWIG_1();
  public final static native void delete_ConnectionReader(long jarg1);
  public final static native boolean ConnectionReader_expectBlock(long jarg1, ConnectionReader jarg1_, String jarg2, int jarg3);
  public final static native long ConnectionReader_expectText__SWIG_0(long jarg1, ConnectionReader jarg1_, int jarg2);
  public final static native long ConnectionReader_expectText__SWIG_1(long jarg1, ConnectionReader jarg1_);
  public final static native int ConnectionReader_expectInt(long jarg1, ConnectionReader jarg1_);
  public final static native double ConnectionReader_expectDouble(long jarg1, ConnectionReader jarg1_);
  public final static native boolean ConnectionReader_isTextMode(long jarg1, ConnectionReader jarg1_);
  public final static native boolean ConnectionReader_convertTextMode(long jarg1, ConnectionReader jarg1_);
  public final static native int ConnectionReader_getSize(long jarg1, ConnectionReader jarg1_);
  public final static native long ConnectionReader_getWriter(long jarg1, ConnectionReader jarg1_);
  public final static native long ConnectionReader_getReference(long jarg1, ConnectionReader jarg1_);
  public final static native long ConnectionReader_getRemoteContact(long jarg1, ConnectionReader jarg1_);
  public final static native long ConnectionReader_getLocalContact(long jarg1, ConnectionReader jarg1_);
  public final static native boolean ConnectionReader_isValid(long jarg1, ConnectionReader jarg1_);
  public final static native boolean ConnectionReader_isActive(long jarg1, ConnectionReader jarg1_);
  public final static native boolean ConnectionReader_isError(long jarg1, ConnectionReader jarg1_);
  public final static native void delete_ConnectionWriter(long jarg1);
  public final static native void ConnectionWriter_appendBlock(long jarg1, ConnectionWriter jarg1_, String jarg2, int jarg3);
  public final static native void ConnectionWriter_appendInt(long jarg1, ConnectionWriter jarg1_, int jarg2);
  public final static native void ConnectionWriter_appendDouble(long jarg1, ConnectionWriter jarg1_, double jarg2);
  public final static native void ConnectionWriter_appendString__SWIG_0(long jarg1, ConnectionWriter jarg1_, String jarg2, int jarg3);
  public final static native void ConnectionWriter_appendString__SWIG_1(long jarg1, ConnectionWriter jarg1_, String jarg2);
  public final static native void ConnectionWriter_appendExternalBlock(long jarg1, ConnectionWriter jarg1_, String jarg2, int jarg3);
  public final static native boolean ConnectionWriter_isTextMode(long jarg1, ConnectionWriter jarg1_);
  public final static native void ConnectionWriter_declareSizes(long jarg1, ConnectionWriter jarg1_, int jarg2, long jarg3);
  public final static native void ConnectionWriter_setReplyHandler(long jarg1, ConnectionWriter jarg1_, long jarg2, PortReader jarg2_);
  public final static native void ConnectionWriter_setReference(long jarg1, ConnectionWriter jarg1_, long jarg2, Portable jarg2_);
  public final static native boolean ConnectionWriter_convertTextMode(long jarg1, ConnectionWriter jarg1_);
  public final static native boolean ConnectionWriter_isValid(long jarg1, ConnectionWriter jarg1_);
  public final static native boolean ConnectionWriter_isActive(long jarg1, ConnectionWriter jarg1_);
  public final static native boolean ConnectionWriter_isError(long jarg1, ConnectionWriter jarg1_);
  public final static native void delete_PortReader(long jarg1);
  public final static native void delete_PortWriter(long jarg1);
  public final static native boolean PortWriter_write(long jarg1, PortWriter jarg1_, long jarg2, ConnectionWriter jarg2_);
  public final static native void PortWriter_onCompletion(long jarg1, PortWriter jarg1_);
  public final static native void PortWriter_onCommencement(long jarg1, PortWriter jarg1_);
  public final static native boolean Portable_write(long jarg1, Portable jarg1_, long jarg2, ConnectionWriter jarg2_);
  public final static native void delete_Portable(long jarg1);
  public final static native void SearchReport_key_set(long jarg1, SearchReport jarg1_, long jarg2, ConstString jarg2_);
  public final static native long SearchReport_key_get(long jarg1, SearchReport jarg1_);
  public final static native void SearchReport_value_set(long jarg1, SearchReport jarg1_, long jarg2, ConstString jarg2_);
  public final static native long SearchReport_value_get(long jarg1, SearchReport jarg1_);
  public final static native void SearchReport_isFound_set(long jarg1, SearchReport jarg1_, boolean jarg2);
  public final static native boolean SearchReport_isFound_get(long jarg1, SearchReport jarg1_);
  public final static native void SearchReport_isGroup_set(long jarg1, SearchReport jarg1_, boolean jarg2);
  public final static native boolean SearchReport_isGroup_get(long jarg1, SearchReport jarg1_);
  public final static native void SearchReport_isComment_set(long jarg1, SearchReport jarg1_, boolean jarg2);
  public final static native boolean SearchReport_isComment_get(long jarg1, SearchReport jarg1_);
  public final static native void SearchReport_isDefault_set(long jarg1, SearchReport jarg1_, boolean jarg2);
  public final static native boolean SearchReport_isDefault_get(long jarg1, SearchReport jarg1_);
  public final static native long new_SearchReport();
  public final static native void delete_SearchReport(long jarg1);
  public final static native void delete_SearchMonitor(long jarg1);
  public final static native void SearchMonitor_report(long jarg1, SearchMonitor jarg1_, long jarg2, SearchReport jarg2_, String jarg3);
  public final static native void delete_Searchable(long jarg1);
  public final static native boolean Searchable_check__SWIG_0(long jarg1, Searchable jarg1_, String jarg2);
  public final static native boolean Searchable_check__SWIG_1(long jarg1, Searchable jarg1_, String jarg2, String jarg3);
  public final static native long Searchable_find(long jarg1, Searchable jarg1_, String jarg2);
  public final static native long Searchable_findGroup__SWIG_0(long jarg1, Searchable jarg1_, String jarg2);
  public final static native long Searchable_findGroup__SWIG_1(long jarg1, Searchable jarg1_, String jarg2, String jarg3);
  public final static native long Searchable_check__SWIG_2(long jarg1, Searchable jarg1_, String jarg2, long jarg3, Value jarg3_, String jarg4);
  public final static native long Searchable_check__SWIG_3(long jarg1, Searchable jarg1_, String jarg2, long jarg3, Value jarg3_);
  public final static native boolean Searchable_isNull(long jarg1, Searchable jarg1_);
  public final static native long Searchable_toString_c(long jarg1, Searchable jarg1_);
  public final static native void Searchable_setMonitor__SWIG_0(long jarg1, Searchable jarg1_, long jarg2, SearchMonitor jarg2_, String jarg3);
  public final static native void Searchable_setMonitor__SWIG_1(long jarg1, Searchable jarg1_, long jarg2, SearchMonitor jarg2_);
  public final static native long Searchable_getMonitor(long jarg1, Searchable jarg1_);
  public final static native long Searchable_getContext(long jarg1, Searchable jarg1_);
  public final static native void Searchable_reportToMonitor(long jarg1, Searchable jarg1_, long jarg2, SearchReport jarg2_);
  public final static native long new_Value__SWIG_0();
  public final static native long new_Value__SWIG_1(int jarg1, boolean jarg2);
  public final static native long new_Value__SWIG_2(int jarg1);
  public final static native long new_Value__SWIG_3(double jarg1);
  public final static native long new_Value__SWIG_4(String jarg1, boolean jarg2);
  public final static native long new_Value__SWIG_5(String jarg1);
  public final static native long new_Value__SWIG_6(long jarg1, int jarg2);
  public final static native long new_Value__SWIG_7(long jarg1, Value jarg1_);
  public final static native void delete_Value(long jarg1);
  public final static native boolean Value_isInt(long jarg1, Value jarg1_);
  public final static native boolean Value_isString(long jarg1, Value jarg1_);
  public final static native boolean Value_isDouble(long jarg1, Value jarg1_);
  public final static native boolean Value_isList(long jarg1, Value jarg1_);
  public final static native boolean Value_isVocab(long jarg1, Value jarg1_);
  public final static native boolean Value_isBlob(long jarg1, Value jarg1_);
  public final static native int Value_asInt(long jarg1, Value jarg1_);
  public final static native int Value_asVocab(long jarg1, Value jarg1_);
  public final static native double Value_asDouble(long jarg1, Value jarg1_);
  public final static native long Value_asString(long jarg1, Value jarg1_);
  public final static native long Value_asList(long jarg1, Value jarg1_);
  public final static native String Value_asBlob(long jarg1, Value jarg1_);
  public final static native int Value_asBlobLength(long jarg1, Value jarg1_);
  public final static native boolean Value_write(long jarg1, Value jarg1_, long jarg2, ConnectionWriter jarg2_);
  public final static native boolean Value_check(long jarg1, Value jarg1_, String jarg2);
  public final static native long Value_find(long jarg1, Value jarg1_, String jarg2);
  public final static native long Value_findGroup(long jarg1, Value jarg1_, String jarg2);
  public final static native boolean Value_isEqual(long jarg1, Value jarg1_, long jarg2, Value jarg2_);
  public final static native boolean Value_notEqual(long jarg1, Value jarg1_, long jarg2, Value jarg2_);
  public final static native void Value_fromString(long jarg1, Value jarg1_, String jarg2);
  public final static native long Value_toString_c(long jarg1, Value jarg1_);
  public final static native long Value_create(long jarg1, Value jarg1_);
  public final static native long Value_clone_c(long jarg1, Value jarg1_);
  public final static native int Value_getCode(long jarg1, Value jarg1_);
  public final static native long Value_makeInt(int jarg1);
  public final static native long Value_makeDouble(double jarg1);
  public final static native long Value_makeString(String jarg1);
  public final static native long Value_makeVocab__SWIG_0(int jarg1);
  public final static native long Value_makeVocab__SWIG_1(String jarg1);
  public final static native long Value_makeBlob(long jarg1, int jarg2);
  public final static native long Value_makeList__SWIG_0();
  public final static native long Value_makeList__SWIG_1(String jarg1);
  public final static native long Value_makeValue(String jarg1);
  public final static native long Value_getNullValue();
  public final static native String Value_toString(long jarg1, Value jarg1_);
  public final static native void delete_Contactable(long jarg1);
  public final static native boolean Contactable_open__SWIG_0(long jarg1, Contactable jarg1_);
  public final static native boolean Contactable_open__SWIG_1(long jarg1, Contactable jarg1_, String jarg2);
  public final static native boolean Contactable_open__SWIG_2(long jarg1, Contactable jarg1_, long jarg2, Contact jarg2_, boolean jarg3);
  public final static native boolean Contactable_open__SWIG_3(long jarg1, Contactable jarg1_, long jarg2, Contact jarg2_);
  public final static native boolean Contactable_addOutput__SWIG_0(long jarg1, Contactable jarg1_, String jarg2);
  public final static native boolean Contactable_addOutput__SWIG_1(long jarg1, Contactable jarg1_, String jarg2, String jarg3);
  public final static native boolean Contactable_addOutput__SWIG_2(long jarg1, Contactable jarg1_, long jarg2, Contact jarg2_);
  public final static native void Contactable_close(long jarg1, Contactable jarg1_);
  public final static native void Contactable_interrupt(long jarg1, Contactable jarg1_);
  public final static native long Contactable_where(long jarg1, Contactable jarg1_);
  public final static native long Contactable_getName(long jarg1, Contactable jarg1_);
  public final static native boolean Contactable_setEnvelope(long jarg1, Contactable jarg1_, long jarg2, PortWriter jarg2_);
  public final static native boolean Contactable_getEnvelope(long jarg1, Contactable jarg1_, long jarg2, PortReader jarg2_);
  public final static native int Contactable_getInputCount(long jarg1, Contactable jarg1_);
  public final static native int Contactable_getOutputCount(long jarg1, Contactable jarg1_);
  public final static native void Contactable_getReport(long jarg1, Contactable jarg1_, long jarg2, PortReport jarg2_);
  public final static native void Contactable_setReporter(long jarg1, Contactable jarg1_, long jarg2, PortReport jarg2_);
  public final static native long new_Network();
  public final static native void delete_Network(long jarg1);
  public final static native boolean Network_connect__SWIG_0(String jarg1, String jarg2, String jarg3, boolean jarg4);
  public final static native boolean Network_connect__SWIG_1(String jarg1, String jarg2, String jarg3);
  public final static native boolean Network_connect__SWIG_2(String jarg1, String jarg2);
  public final static native boolean Network_disconnect__SWIG_0(String jarg1, String jarg2, boolean jarg3);
  public final static native boolean Network_disconnect__SWIG_1(String jarg1, String jarg2);
  public final static native boolean Network_isConnected__SWIG_0(String jarg1, String jarg2, boolean jarg3);
  public final static native boolean Network_isConnected__SWIG_1(String jarg1, String jarg2);
  public final static native boolean Network_sync__SWIG_0(String jarg1, boolean jarg2);
  public final static native boolean Network_sync__SWIG_1(String jarg1);
  public final static native int Network_main(int jarg1, long jarg2);
  public final static native void Network_init();
  public final static native void Network_fini();
  public final static native void Network_assertion(boolean jarg1);
  public final static native long Network_queryName(String jarg1);
  public final static native long Network_registerName(String jarg1);
  public final static native long Network_registerContact(long jarg1, Contact jarg1_);
  public final static native long Network_unregisterName(String jarg1);
  public final static native long Network_unregisterContact(long jarg1, Contact jarg1_);
  public final static native boolean Network_setProperty(String jarg1, String jarg2, long jarg3, Value jarg3_);
  public final static native long Network_getProperty(String jarg1, String jarg2);
  public final static native long Network_getNameServerName();
  public final static native boolean Network_setLocalMode(boolean jarg1);
  public final static native long Network_readString__SWIG_0(long jarg1);
  public final static native long Network_readString__SWIG_1();
  public final static native boolean Network_write__SWIG_0(long jarg1, Contact jarg1_, long jarg2, PortWriter jarg2_, long jarg3, PortReader jarg3_, boolean jarg4);
  public final static native boolean Network_write__SWIG_1(long jarg1, Contact jarg1_, long jarg2, PortWriter jarg2_, long jarg3, PortReader jarg3_);
  public final static native boolean Network_write__SWIG_2(String jarg1, long jarg2, PortWriter jarg2_, long jarg3, PortReader jarg3_);
  public final static native boolean Network_checkNetwork();
  public final static native void delete_PortReaderCreator(long jarg1);
  public final static native long PortReaderCreator_create(long jarg1, PortReaderCreator jarg1_);
  public final static native boolean Property_check__SWIG_0_0(long jarg1, Property jarg1_, String jarg2, String jarg3);
  public final static native long Property_check__SWIG_0_1(long jarg1, Property jarg1_, String jarg2, long jarg3, Value jarg3_, String jarg4);
  public final static native long Property_check__SWIG_0_2(long jarg1, Property jarg1_, String jarg2, long jarg3, Value jarg3_);
  public final static native long Property_findGroup__SWIG_0_0(long jarg1, Property jarg1_, String jarg2, String jarg3);
  public final static native long new_Property__SWIG_0();
  public final static native long new_Property__SWIG_1(String jarg1);
  public final static native long new_Property__SWIG_2(long jarg1, Property jarg1_);
  public final static native void delete_Property(long jarg1);
  public final static native boolean Property_check__SWIG_1(long jarg1, Property jarg1_, String jarg2);
  public final static native void Property_put__SWIG_0(long jarg1, Property jarg1_, String jarg2, String jarg3);
  public final static native void Property_put__SWIG_1(long jarg1, Property jarg1_, String jarg2, long jarg3, Value jarg3_);
  public final static native void Property_put__SWIG_2(long jarg1, Property jarg1_, String jarg2, int jarg3);
  public final static native void Property_put__SWIG_3(long jarg1, Property jarg1_, String jarg2, double jarg3);
  public final static native void Property_unput(long jarg1, Property jarg1_, String jarg2);
  public final static native long Property_find(long jarg1, Property jarg1_, String jarg2);
  public final static native long Property_findGroup__SWIG_1(long jarg1, Property jarg1_, String jarg2);
  public final static native void Property_clear(long jarg1, Property jarg1_);
  public final static native void Property_fromString__SWIG_0(long jarg1, Property jarg1_, String jarg2, boolean jarg3);
  public final static native void Property_fromString__SWIG_1(long jarg1, Property jarg1_, String jarg2);
  public final static native void Property_fromCommand__SWIG_0(long jarg1, Property jarg1_, int jarg2, long jarg3, boolean jarg4, boolean jarg5);
  public final static native void Property_fromCommand__SWIG_1(long jarg1, Property jarg1_, int jarg2, long jarg3, boolean jarg4);
  public final static native void Property_fromCommand__SWIG_2(long jarg1, Property jarg1_, int jarg2, long jarg3);
  public final static native boolean Property_fromConfigFile__SWIG_0(long jarg1, Property jarg1_, String jarg2, boolean jarg3);
  public final static native boolean Property_fromConfigFile__SWIG_1(long jarg1, Property jarg1_, String jarg2);
  public final static native boolean Property_fromConfigFile__SWIG_2(long jarg1, Property jarg1_, String jarg2, long jarg3, Searchable jarg3_, boolean jarg4);
  public final static native boolean Property_fromConfigFile__SWIG_3(long jarg1, Property jarg1_, String jarg2, long jarg3, Searchable jarg3_);
  public final static native void Property_fromConfig__SWIG_0(long jarg1, Property jarg1_, String jarg2, boolean jarg3);
  public final static native void Property_fromConfig__SWIG_1(long jarg1, Property jarg1_, String jarg2);
  public final static native void Property_fromConfig__SWIG_2(long jarg1, Property jarg1_, String jarg2, long jarg3, Searchable jarg3_, boolean jarg4);
  public final static native void Property_fromConfig__SWIG_3(long jarg1, Property jarg1_, String jarg2, long jarg3, Searchable jarg3_);
  public final static native void Property_fromQuery__SWIG_0(long jarg1, Property jarg1_, String jarg2, boolean jarg3);
  public final static native void Property_fromQuery__SWIG_1(long jarg1, Property jarg1_, String jarg2);
  public final static native long Property_toString_c(long jarg1, Property jarg1_);
  public final static native boolean Property_write(long jarg1, Property jarg1_, long jarg2, ConnectionWriter jarg2_);
  public final static native String Property_toString(long jarg1, Property jarg1_);
  public final static native long new_Port();
  public final static native void delete_Port(long jarg1);
  public final static native boolean Port_addOutput__SWIG_0(long jarg1, Port jarg1_, String jarg2);
  public final static native boolean Port_addOutput__SWIG_1(long jarg1, Port jarg1_, String jarg2, String jarg3);
  public final static native boolean Port_addOutput__SWIG_2(long jarg1, Port jarg1_, long jarg2, Contact jarg2_);
  public final static native void Port_close(long jarg1, Port jarg1_);
  public final static native void Port_interrupt(long jarg1, Port jarg1_);
  public final static native long Port_where(long jarg1, Port jarg1_);
  public final static native boolean Port_write__SWIG_0(long jarg1, Port jarg1_, long jarg2, PortWriter jarg2_, long jarg3, PortWriter jarg3_);
  public final static native boolean Port_write__SWIG_1(long jarg1, Port jarg1_, long jarg2, PortWriter jarg2_);
  public final static native boolean Port_write__SWIG_2(long jarg1, Port jarg1_, long jarg2, PortWriter jarg2_, long jarg3, PortReader jarg3_, long jarg4, PortWriter jarg4_);
  public final static native boolean Port_write__SWIG_3(long jarg1, Port jarg1_, long jarg2, PortWriter jarg2_, long jarg3, PortReader jarg3_);
  public final static native boolean Port_read__SWIG_0(long jarg1, Port jarg1_, long jarg2, PortReader jarg2_, boolean jarg3);
  public final static native boolean Port_read__SWIG_1(long jarg1, Port jarg1_, long jarg2, PortReader jarg2_);
  public final static native boolean Port_reply(long jarg1, Port jarg1_, long jarg2, PortWriter jarg2_);
  public final static native void Port_setReader(long jarg1, Port jarg1_, long jarg2, PortReader jarg2_);
  public final static native void Port_setReaderCreator(long jarg1, Port jarg1_, long jarg2, PortReaderCreator jarg2_);
  public final static native void Port_enableBackgroundWrite(long jarg1, Port jarg1_, boolean jarg2);
  public final static native boolean Port_isWriting(long jarg1, Port jarg1_);
  public final static native boolean Port_setEnvelope(long jarg1, Port jarg1_, long jarg2, PortWriter jarg2_);
  public final static native boolean Port_getEnvelope(long jarg1, Port jarg1_, long jarg2, PortReader jarg2_);
  public final static native int Port_getInputCount(long jarg1, Port jarg1_);
  public final static native int Port_getOutputCount(long jarg1, Port jarg1_);
  public final static native void Port_getReport(long jarg1, Port jarg1_, long jarg2, PortReport jarg2_);
  public final static native void Port_setReporter(long jarg1, Port jarg1_, long jarg2, PortReport jarg2_);
  public final static native void Port_setAdminMode__SWIG_0(long jarg1, Port jarg1_, boolean jarg2);
  public final static native void Port_setAdminMode__SWIG_1(long jarg1, Port jarg1_);
  public final static native boolean Port_write__SWIG_4(long jarg1, Port jarg1_, long jarg2, Bottle jarg2_);
  public final static native boolean Port_write__SWIG_5(long jarg1, Port jarg1_, long jarg2, Property jarg2_);
  public final static native boolean Port_write__SWIG_6(long jarg1, Port jarg1_, long jarg2, ImageRgb jarg2_);
  public final static native boolean Port_write__SWIG_7(long jarg1, Port jarg1_, long jarg2, ImageFloat jarg2_);
  public final static native int BOTTLE_TAG_INT_get();
  public final static native int BOTTLE_TAG_VOCAB_get();
  public final static native int BOTTLE_TAG_DOUBLE_get();
  public final static native int BOTTLE_TAG_STRING_get();
  public final static native int BOTTLE_TAG_BLOB_get();
  public final static native int BOTTLE_TAG_LIST_get();
  public final static native boolean Bottle_check__SWIG_0_0(long jarg1, Bottle jarg1_, String jarg2, String jarg3);
  public final static native long Bottle_check__SWIG_0_1(long jarg1, Bottle jarg1_, String jarg2, long jarg3, Value jarg3_, String jarg4);
  public final static native long Bottle_check__SWIG_0_2(long jarg1, Bottle jarg1_, String jarg2, long jarg3, Value jarg3_);
  public final static native long Bottle_findGroup__SWIG_0_0(long jarg1, Bottle jarg1_, String jarg2, String jarg3);
  public final static native long new_Bottle__SWIG_0();
  public final static native long new_Bottle__SWIG_1(String jarg1);
  public final static native long new_Bottle__SWIG_2(long jarg1, Bottle jarg1_);
  public final static native void Bottle_clear(long jarg1, Bottle jarg1_);
  public final static native void Bottle_addInt(long jarg1, Bottle jarg1_, int jarg2);
  public final static native void Bottle_addVocab(long jarg1, Bottle jarg1_, int jarg2);
  public final static native void Bottle_addDouble(long jarg1, Bottle jarg1_, double jarg2);
  public final static native void Bottle_addString(long jarg1, Bottle jarg1_, String jarg2);
  public final static native void Bottle_add(long jarg1, Bottle jarg1_, long jarg2, Value jarg2_);
  public final static native long Bottle_addList(long jarg1, Bottle jarg1_);
  public final static native long Bottle_pop(long jarg1, Bottle jarg1_);
  public final static native long Bottle_get(long jarg1, Bottle jarg1_, int jarg2);
  public final static native int Bottle_size(long jarg1, Bottle jarg1_);
  public final static native void Bottle_fromString(long jarg1, Bottle jarg1_, String jarg2);
  public final static native void Bottle_fromBinary(long jarg1, Bottle jarg1_, String jarg2, int jarg3);
  public final static native String Bottle_toBinary__SWIG_0(long jarg1, Bottle jarg1_, long jarg2);
  public final static native String Bottle_toBinary__SWIG_1(long jarg1, Bottle jarg1_);
  public final static native long Bottle_toString_c(long jarg1, Bottle jarg1_);
  public final static native boolean Bottle_write(long jarg1, Bottle jarg1_, long jarg2, ConnectionWriter jarg2_);
  public final static native void Bottle_onCommencement(long jarg1, Bottle jarg1_);
  public final static native boolean Bottle_check__SWIG_1(long jarg1, Bottle jarg1_, String jarg2);
  public final static native long Bottle_find(long jarg1, Bottle jarg1_, String jarg2);
  public final static native long Bottle_findGroup__SWIG_1(long jarg1, Bottle jarg1_, String jarg2);
  public final static native void delete_Bottle(long jarg1);
  public final static native void Bottle_copy__SWIG_0(long jarg1, Bottle jarg1_, long jarg2, Bottle jarg2_, int jarg3, int jarg4);
  public final static native void Bottle_copy__SWIG_1(long jarg1, Bottle jarg1_, long jarg2, Bottle jarg2_, int jarg3);
  public final static native void Bottle_copy__SWIG_2(long jarg1, Bottle jarg1_, long jarg2, Bottle jarg2_);
  public final static native long Bottle_getNullBottle();
  public final static native boolean Bottle_isEqual(long jarg1, Bottle jarg1_, long jarg2, Bottle jarg2_);
  public final static native boolean Bottle_notEqual(long jarg1, Bottle jarg1_, long jarg2, Bottle jarg2_);
  public final static native void Bottle_append(long jarg1, Bottle jarg1_, long jarg2, Bottle jarg2_);
  public final static native long Bottle_tail(long jarg1, Bottle jarg1_);
  public final static native void Bottle_specialize(long jarg1, Bottle jarg1_, int jarg2);
  public final static native int Bottle_getSpecialization(long jarg1, Bottle jarg1_);
  public final static native void Bottle_setNested(long jarg1, Bottle jarg1_, boolean jarg2);
  public final static native String Bottle_toString(long jarg1, Bottle jarg1_);
  public final static native void typedReaderMissingCallback();
  public final static native void delete_PortReaderBufferBaseCreator(long jarg1);
  public final static native long PortReaderBufferBaseCreator_create(long jarg1, PortReaderBufferBaseCreator jarg1_);
  public final static native long new_PortReaderBufferBase(long jarg1);
  public final static native void PortReaderBufferBase_setCreator(long jarg1, PortReaderBufferBase jarg1_, long jarg2, PortReaderBufferBaseCreator jarg2_);
  public final static native void PortReaderBufferBase_setReplier(long jarg1, PortReaderBufferBase jarg1_, long jarg2, PortReader jarg2_);
  public final static native void delete_PortReaderBufferBase(long jarg1);
  public final static native long PortReaderBufferBase_create(long jarg1, PortReaderBufferBase jarg1_);
  public final static native void PortReaderBufferBase_release__SWIG_0(long jarg1, PortReaderBufferBase jarg1_, long jarg2, PortReader jarg2_);
  public final static native int PortReaderBufferBase_check(long jarg1, PortReaderBufferBase jarg1_);
  public final static native void PortReaderBufferBase_setAutoRelease__SWIG_0(long jarg1, PortReaderBufferBase jarg1_, boolean jarg2);
  public final static native void PortReaderBufferBase_setAutoRelease__SWIG_1(long jarg1, PortReaderBufferBase jarg1_);
  public final static native void PortReaderBufferBase_setPrune__SWIG_0(long jarg1, PortReaderBufferBase jarg1_, boolean jarg2);
  public final static native void PortReaderBufferBase_setPrune__SWIG_1(long jarg1, PortReaderBufferBase jarg1_);
  public final static native void PortReaderBufferBase_setAllowReuse__SWIG_0(long jarg1, PortReaderBufferBase jarg1_, boolean jarg2);
  public final static native void PortReaderBufferBase_setAllowReuse__SWIG_1(long jarg1, PortReaderBufferBase jarg1_);
  public final static native long PortReaderBufferBase_readBase(long jarg1, PortReaderBufferBase jarg1_);
  public final static native long PortReaderBufferBase_getMaxBuffer(long jarg1, PortReaderBufferBase jarg1_);
  public final static native void PortReaderBufferBase_attachBase(long jarg1, PortReaderBufferBase jarg1_, long jarg2, Port jarg2_);
  public final static native boolean PortReaderBufferBase_isClosed(long jarg1, PortReaderBufferBase jarg1_);
  public final static native long PortReaderBufferBase_getName(long jarg1, PortReaderBufferBase jarg1_);
  public final static native boolean PortReaderBufferBase_acceptObjectBase(long jarg1, PortReaderBufferBase jarg1_, long jarg2, PortReader jarg2_, long jarg3, PortWriter jarg3_);
  public final static native boolean PortReaderBufferBase_forgetObjectBase(long jarg1, PortReaderBufferBase jarg1_, long jarg2, PortReader jarg2_, long jarg3, PortWriter jarg3_);
  public final static native long PortReaderBufferBase_acquire(long jarg1, PortReaderBufferBase jarg1_);
  public final static native void PortReaderBufferBase_release__SWIG_1(long jarg1, PortReaderBufferBase jarg1_, long jarg2);
  public final static native void delete_PortWriterBufferManager(long jarg1);
  public final static native void PortWriterBufferManager_onCompletion(long jarg1, PortWriterBufferManager jarg1_, long jarg2);
  public final static native long PortWriterWrapper_getInternal(long jarg1, PortWriterWrapper jarg1_);
  public final static native void delete_PortWriterWrapper(long jarg1);
  public final static native void delete_PortWriterBufferBase(long jarg1);
  public final static native long PortWriterBufferBase_create(long jarg1, PortWriterBufferBase jarg1_, long jarg2, PortWriterBufferManager jarg2_, long jarg3);
  public final static native long PortWriterBufferBase_getContent(long jarg1, PortWriterBufferBase jarg1_);
  public final static native int PortWriterBufferBase_getCount(long jarg1, PortWriterBufferBase jarg1_);
  public final static native void PortWriterBufferBase_attach(long jarg1, PortWriterBufferBase jarg1_, long jarg2, Port jarg2_);
  public final static native void PortWriterBufferBase_write(long jarg1, PortWriterBufferBase jarg1_, boolean jarg2);
  public final static native double Random_uniform__SWIG_0();
  public final static native double Random_normal__SWIG_0(double jarg1, double jarg2);
  public final static native void Random_seed_c(int jarg1);
  public final static native double Random_normal__SWIG_1();
  public final static native int Random_uniform__SWIG_1(int jarg1, int jarg2);
  public final static native long new_Random();
  public final static native void delete_Random(long jarg1);
  public final static native long new_Semaphore__SWIG_0(int jarg1);
  public final static native long new_Semaphore__SWIG_1();
  public final static native void delete_Semaphore(long jarg1);
  public final static native void Semaphore_wait_c(long jarg1, Semaphore jarg1_);
  public final static native boolean Semaphore_check(long jarg1, Semaphore jarg1_);
  public final static native void Semaphore_post(long jarg1, Semaphore jarg1_);
  public final static native void delete_Thread(long jarg1);
  public final static native void Thread_run(long jarg1, Thread jarg1_);
  public final static native void Thread_onStop(long jarg1, Thread jarg1_);
  public final static native boolean Thread_start(long jarg1, Thread jarg1_);
  public final static native boolean Thread_stop(long jarg1, Thread jarg1_);
  public final static native void Thread_beforeStart(long jarg1, Thread jarg1_);
  public final static native void Thread_afterStart(long jarg1, Thread jarg1_, boolean jarg2);
  public final static native boolean Thread_threadInit(long jarg1, Thread jarg1_);
  public final static native void Thread_threadRelease(long jarg1, Thread jarg1_);
  public final static native boolean Thread_isStopping(long jarg1, Thread jarg1_);
  public final static native boolean Thread_isRunning(long jarg1, Thread jarg1_);
  public final static native void Thread_setOptions__SWIG_0(long jarg1, Thread jarg1_, int jarg2);
  public final static native void Thread_setOptions__SWIG_1(long jarg1, Thread jarg1_);
  public final static native int Thread_getCount();
  public final static native int Thread_getKey(long jarg1, Thread jarg1_);
  public final static native int Thread_setPriority(long jarg1, Thread jarg1_, int jarg2);
  public final static native int Thread_getPriority(long jarg1, Thread jarg1_);
  public final static native void Time_delay(double jarg1);
  public final static native double Time_now();
  public final static native void Time_yield();
  public final static native void Time_turboBoost();
  public final static native long new_Time();
  public final static native void delete_Time(long jarg1);
  public final static native long new_Image__SWIG_0();
  public final static native long new_Image__SWIG_1(long jarg1, Image jarg1_);
  public final static native void delete_Image(long jarg1);
  public final static native boolean Image_copy__SWIG_0(long jarg1, Image jarg1_, long jarg2, Image jarg2_);
  public final static native boolean Image_copy__SWIG_1(long jarg1, Image jarg1_, long jarg2, Image jarg2_, int jarg3, int jarg4);
  public final static native int Image_width(long jarg1, Image jarg1_);
  public final static native int Image_height(long jarg1, Image jarg1_);
  public final static native int Image_getPixelSize(long jarg1, Image jarg1_);
  public final static native int Image_getPixelCode(long jarg1, Image jarg1_);
  public final static native int Image_getRowSize(long jarg1, Image jarg1_);
  public final static native int Image_getQuantum(long jarg1, Image jarg1_);
  public final static native int Image_getPadding(long jarg1, Image jarg1_);
  public final static native long Image_getRow(long jarg1, Image jarg1_, int jarg2);
  public final static native long Image_getPixelAddress(long jarg1, Image jarg1_, int jarg2, int jarg3);
  public final static native boolean Image_isPixel(long jarg1, Image jarg1_, int jarg2, int jarg3);
  public final static native void Image_zero(long jarg1, Image jarg1_);
  public final static native void Image_resize__SWIG_0(long jarg1, Image jarg1_, int jarg2, int jarg3);
  public final static native void Image_resize__SWIG_1(long jarg1, Image jarg1_, long jarg2, Image jarg2_);
  public final static native void Image_setExternal(long jarg1, Image jarg1_, long jarg2, int jarg3, int jarg4);
  public final static native long Image_getRawImage(long jarg1, Image jarg1_);
  public final static native int Image_getRawImageSize(long jarg1, Image jarg1_);
  public final static native long Image_getIplImage(long jarg1, Image jarg1_);
  public final static native void Image_wrapIplImage(long jarg1, Image jarg1_, long jarg2);
  public final static native boolean Image_write(long jarg1, Image jarg1_, long jarg2, ConnectionWriter jarg2_);
  public final static native void Image_setQuantum(long jarg1, Image jarg1_, int jarg2);
  public final static native boolean Image_topIsLowIndex(long jarg1, Image jarg1_);
  public final static native void Image_setTopIsLowIndex(long jarg1, Image jarg1_, boolean jarg2);
  public final static native long Image_getRowArray(long jarg1, Image jarg1_);
  public final static native void FlexImage_setPixelCode(long jarg1, FlexImage jarg1_, int jarg2);
  public final static native void FlexImage_setPixelSize(long jarg1, FlexImage jarg1_, int jarg2);
  public final static native void FlexImage_setQuantum(long jarg1, FlexImage jarg1_, int jarg2);
  public final static native long new_FlexImage();
  public final static native void delete_FlexImage(long jarg1);
  public final static native int VOCAB_PIXEL_INVALID_get();
  public final static native int VOCAB_PIXEL_MONO_get();
  public final static native int VOCAB_PIXEL_MONO16_get();
  public final static native int VOCAB_PIXEL_RGB_get();
  public final static native int VOCAB_PIXEL_RGBA_get();
  public final static native int VOCAB_PIXEL_BGRA_get();
  public final static native int VOCAB_PIXEL_INT_get();
  public final static native int VOCAB_PIXEL_HSV_get();
  public final static native int VOCAB_PIXEL_BGR_get();
  public final static native int VOCAB_PIXEL_MONO_SIGNED_get();
  public final static native int VOCAB_PIXEL_RGB_SIGNED_get();
  public final static native int VOCAB_PIXEL_RGB_INT_get();
  public final static native int VOCAB_PIXEL_MONO_FLOAT_get();
  public final static native int VOCAB_PIXEL_RGB_FLOAT_get();
  public final static native int VOCAB_PIXEL_HSV_FLOAT_get();
  public final static native void PixelRgb_r_set(long jarg1, PixelRgb jarg1_, short jarg2);
  public final static native short PixelRgb_r_get(long jarg1, PixelRgb jarg1_);
  public final static native void PixelRgb_g_set(long jarg1, PixelRgb jarg1_, short jarg2);
  public final static native short PixelRgb_g_get(long jarg1, PixelRgb jarg1_);
  public final static native void PixelRgb_b_set(long jarg1, PixelRgb jarg1_, short jarg2);
  public final static native short PixelRgb_b_get(long jarg1, PixelRgb jarg1_);
  public final static native long new_PixelRgb__SWIG_0();
  public final static native long new_PixelRgb__SWIG_1(short jarg1, short jarg2, short jarg3);
  public final static native void delete_PixelRgb(long jarg1);
  public final static native void PixelRgba_r_set(long jarg1, PixelRgba jarg1_, short jarg2);
  public final static native short PixelRgba_r_get(long jarg1, PixelRgba jarg1_);
  public final static native void PixelRgba_g_set(long jarg1, PixelRgba jarg1_, short jarg2);
  public final static native short PixelRgba_g_get(long jarg1, PixelRgba jarg1_);
  public final static native void PixelRgba_b_set(long jarg1, PixelRgba jarg1_, short jarg2);
  public final static native short PixelRgba_b_get(long jarg1, PixelRgba jarg1_);
  public final static native void PixelRgba_a_set(long jarg1, PixelRgba jarg1_, short jarg2);
  public final static native short PixelRgba_a_get(long jarg1, PixelRgba jarg1_);
  public final static native long new_PixelRgba__SWIG_0();
  public final static native long new_PixelRgba__SWIG_1(short jarg1, short jarg2, short jarg3, short jarg4);
  public final static native void delete_PixelRgba(long jarg1);
  public final static native void PixelBgra_b_set(long jarg1, PixelBgra jarg1_, short jarg2);
  public final static native short PixelBgra_b_get(long jarg1, PixelBgra jarg1_);
  public final static native void PixelBgra_g_set(long jarg1, PixelBgra jarg1_, short jarg2);
  public final static native short PixelBgra_g_get(long jarg1, PixelBgra jarg1_);
  public final static native void PixelBgra_r_set(long jarg1, PixelBgra jarg1_, short jarg2);
  public final static native short PixelBgra_r_get(long jarg1, PixelBgra jarg1_);
  public final static native void PixelBgra_a_set(long jarg1, PixelBgra jarg1_, short jarg2);
  public final static native short PixelBgra_a_get(long jarg1, PixelBgra jarg1_);
  public final static native long new_PixelBgra__SWIG_0();
  public final static native long new_PixelBgra__SWIG_1(short jarg1, short jarg2, short jarg3, short jarg4);
  public final static native void delete_PixelBgra(long jarg1);
  public final static native void PixelBgr_b_set(long jarg1, PixelBgr jarg1_, short jarg2);
  public final static native short PixelBgr_b_get(long jarg1, PixelBgr jarg1_);
  public final static native void PixelBgr_g_set(long jarg1, PixelBgr jarg1_, short jarg2);
  public final static native short PixelBgr_g_get(long jarg1, PixelBgr jarg1_);
  public final static native void PixelBgr_r_set(long jarg1, PixelBgr jarg1_, short jarg2);
  public final static native short PixelBgr_r_get(long jarg1, PixelBgr jarg1_);
  public final static native long new_PixelBgr__SWIG_0();
  public final static native long new_PixelBgr__SWIG_1(short jarg1, short jarg2, short jarg3);
  public final static native void delete_PixelBgr(long jarg1);
  public final static native void PixelHsv_h_set(long jarg1, PixelHsv jarg1_, short jarg2);
  public final static native short PixelHsv_h_get(long jarg1, PixelHsv jarg1_);
  public final static native void PixelHsv_s_set(long jarg1, PixelHsv jarg1_, short jarg2);
  public final static native short PixelHsv_s_get(long jarg1, PixelHsv jarg1_);
  public final static native void PixelHsv_v_set(long jarg1, PixelHsv jarg1_, short jarg2);
  public final static native short PixelHsv_v_get(long jarg1, PixelHsv jarg1_);
  public final static native long new_PixelHsv();
  public final static native void delete_PixelHsv(long jarg1);
  public final static native void PixelRgbSigned_r_set(long jarg1, PixelRgbSigned jarg1_, char jarg2);
  public final static native char PixelRgbSigned_r_get(long jarg1, PixelRgbSigned jarg1_);
  public final static native void PixelRgbSigned_g_set(long jarg1, PixelRgbSigned jarg1_, char jarg2);
  public final static native char PixelRgbSigned_g_get(long jarg1, PixelRgbSigned jarg1_);
  public final static native void PixelRgbSigned_b_set(long jarg1, PixelRgbSigned jarg1_, char jarg2);
  public final static native char PixelRgbSigned_b_get(long jarg1, PixelRgbSigned jarg1_);
  public final static native long new_PixelRgbSigned();
  public final static native void delete_PixelRgbSigned(long jarg1);
  public final static native void PixelRgbFloat_r_set(long jarg1, PixelRgbFloat jarg1_, float jarg2);
  public final static native float PixelRgbFloat_r_get(long jarg1, PixelRgbFloat jarg1_);
  public final static native void PixelRgbFloat_g_set(long jarg1, PixelRgbFloat jarg1_, float jarg2);
  public final static native float PixelRgbFloat_g_get(long jarg1, PixelRgbFloat jarg1_);
  public final static native void PixelRgbFloat_b_set(long jarg1, PixelRgbFloat jarg1_, float jarg2);
  public final static native float PixelRgbFloat_b_get(long jarg1, PixelRgbFloat jarg1_);
  public final static native long new_PixelRgbFloat();
  public final static native void delete_PixelRgbFloat(long jarg1);
  public final static native void PixelRgbInt_r_set(long jarg1, PixelRgbInt jarg1_, long jarg2);
  public final static native long PixelRgbInt_r_get(long jarg1, PixelRgbInt jarg1_);
  public final static native void PixelRgbInt_g_set(long jarg1, PixelRgbInt jarg1_, long jarg2);
  public final static native long PixelRgbInt_g_get(long jarg1, PixelRgbInt jarg1_);
  public final static native void PixelRgbInt_b_set(long jarg1, PixelRgbInt jarg1_, long jarg2);
  public final static native long PixelRgbInt_b_get(long jarg1, PixelRgbInt jarg1_);
  public final static native long new_PixelRgbInt__SWIG_0();
  public final static native long new_PixelRgbInt__SWIG_1(int jarg1, int jarg2, int jarg3);
  public final static native void delete_PixelRgbInt(long jarg1);
  public final static native void PixelHsvFloat_h_set(long jarg1, PixelHsvFloat jarg1_, float jarg2);
  public final static native float PixelHsvFloat_h_get(long jarg1, PixelHsvFloat jarg1_);
  public final static native void PixelHsvFloat_s_set(long jarg1, PixelHsvFloat jarg1_, float jarg2);
  public final static native float PixelHsvFloat_s_get(long jarg1, PixelHsvFloat jarg1_);
  public final static native void PixelHsvFloat_v_set(long jarg1, PixelHsvFloat jarg1_, float jarg2);
  public final static native float PixelHsvFloat_v_get(long jarg1, PixelHsvFloat jarg1_);
  public final static native long new_PixelHsvFloat();
  public final static native void delete_PixelHsvFloat(long jarg1);
  public final static native long new_Sound__SWIG_0(int jarg1);
  public final static native long new_Sound__SWIG_1();
  public final static native long new_Sound__SWIG_2(long jarg1, Sound jarg1_);
  public final static native void delete_Sound(long jarg1);
  public final static native void Sound_resize__SWIG_0(long jarg1, Sound jarg1_, int jarg2, int jarg3);
  public final static native void Sound_resize__SWIG_1(long jarg1, Sound jarg1_, int jarg2);
  public final static native int Sound_get__SWIG_0(long jarg1, Sound jarg1_, int jarg2, int jarg3);
  public final static native int Sound_get__SWIG_1(long jarg1, Sound jarg1_, int jarg2);
  public final static native void Sound_set__SWIG_0(long jarg1, Sound jarg1_, int jarg2, int jarg3, int jarg4);
  public final static native void Sound_set__SWIG_1(long jarg1, Sound jarg1_, int jarg2, int jarg3);
  public final static native int Sound_getSafe__SWIG_0(long jarg1, Sound jarg1_, int jarg2, int jarg3);
  public final static native int Sound_getSafe__SWIG_1(long jarg1, Sound jarg1_, int jarg2);
  public final static native void Sound_setSafe__SWIG_0(long jarg1, Sound jarg1_, int jarg2, int jarg3, int jarg4);
  public final static native void Sound_setSafe__SWIG_1(long jarg1, Sound jarg1_, int jarg2, int jarg3);
  public final static native boolean Sound_isSample__SWIG_0(long jarg1, Sound jarg1_, int jarg2, int jarg3);
  public final static native boolean Sound_isSample__SWIG_1(long jarg1, Sound jarg1_, int jarg2);
  public final static native int Sound_getFrequency(long jarg1, Sound jarg1_);
  public final static native void Sound_setFrequency(long jarg1, Sound jarg1_, int jarg2);
  public final static native int Sound_getBytesPerSample(long jarg1, Sound jarg1_);
  public final static native int Sound_getSamples(long jarg1, Sound jarg1_);
  public final static native int Sound_getChannels(long jarg1, Sound jarg1_);
  public final static native boolean Sound_write(long jarg1, Sound jarg1_, long jarg2, ConnectionWriter jarg2_);
  public final static native long Sound_getRawData(long jarg1, Sound jarg1_);
  public final static native int Sound_getRawDataSize(long jarg1, Sound jarg1_);
  public final static native void delete_BottleCallback(long jarg1);
  public final static native void BottleCallback_onRead__SWIG_0(long jarg1, BottleCallback jarg1_, long jarg2, Bottle jarg2_);
  public final static native void BottleCallback_onRead__SWIG_1(long jarg1, BottleCallback jarg1_, long jarg2, Bottle jarg2_, long jarg3, TypedReaderBottle jarg3_);
  public final static native long new_BottleCallback();
  public final static native boolean IConfig_open(long jarg1, IConfig jarg1_, long jarg2, Searchable jarg2_);
  public final static native boolean IConfig_close(long jarg1, IConfig jarg1_);
  public final static native boolean IConfig_configure(long jarg1, IConfig jarg1_, long jarg2, Searchable jarg2_);
  public final static native void delete_IConfig(long jarg1);
  public final static native long new_IConfig();
  public final static native void delete_DeviceDriver(long jarg1);
  public final static native boolean DeviceDriver_open(long jarg1, DeviceDriver jarg1_, long jarg2, Searchable jarg2_);
  public final static native boolean DeviceDriver_close(long jarg1, DeviceDriver jarg1_);
  public final static native long new_DeviceDriver();
  public final static native long new_DeviceResponder();
  public final static native void DeviceResponder_addUsage__SWIG_0(long jarg1, DeviceResponder jarg1_, String jarg2, String jarg3);
  public final static native void DeviceResponder_addUsage__SWIG_1(long jarg1, DeviceResponder jarg1_, String jarg2);
  public final static native void DeviceResponder_addUsage__SWIG_2(long jarg1, DeviceResponder jarg1_, long jarg2, Bottle jarg2_, String jarg3);
  public final static native void DeviceResponder_addUsage__SWIG_3(long jarg1, DeviceResponder jarg1_, long jarg2, Bottle jarg2_);
  public final static native boolean DeviceResponder_respond(long jarg1, DeviceResponder jarg1_, long jarg2, Bottle jarg2_, long jarg3, Bottle jarg3_);
  public final static native void DeviceResponder_onRead(long jarg1, DeviceResponder jarg1_, long jarg2, Bottle jarg2_);
  public final static native void DeviceResponder_makeUsage(long jarg1, DeviceResponder jarg1_);
  public final static native void DeviceResponder_attach(long jarg1, DeviceResponder jarg1_, long jarg2, TypedReaderBottle jarg2_);
  public final static native void delete_DeviceResponder(long jarg1);
  public final static native long new_PolyDriver__SWIG_0();
  public final static native long new_PolyDriver__SWIG_1(String jarg1);
  public final static native long new_PolyDriver__SWIG_2(long jarg1, Searchable jarg1_);
  public final static native boolean PolyDriver_open__SWIG_0(long jarg1, PolyDriver jarg1_, String jarg2);
  public final static native boolean PolyDriver_open__SWIG_1(long jarg1, PolyDriver jarg1_, long jarg2, Searchable jarg2_);
  public final static native boolean PolyDriver_link(long jarg1, PolyDriver jarg1_, long jarg2, PolyDriver jarg2_);
  public final static native long PolyDriver_take(long jarg1, PolyDriver jarg1_);
  public final static native void delete_PolyDriver(long jarg1);
  public final static native boolean PolyDriver_close(long jarg1, PolyDriver jarg1_);
  public final static native boolean PolyDriver_isValid(long jarg1, PolyDriver jarg1_);
  public final static native long PolyDriver_getOptions(long jarg1, PolyDriver jarg1_);
  public final static native long PolyDriver_getComment(long jarg1, PolyDriver jarg1_, String jarg2);
  public final static native long PolyDriver_getDefaultValue(long jarg1, PolyDriver jarg1_, String jarg2);
  public final static native long PolyDriver_getValue(long jarg1, PolyDriver jarg1_, String jarg2);
  public final static native long PolyDriver_viewFrameGrabberImage(long jarg1, PolyDriver jarg1_);
  public final static native long PolyDriver_viewIPositionControl(long jarg1, PolyDriver jarg1_);
  public final static native long PolyDriver_viewIVelocityControl(long jarg1, PolyDriver jarg1_);
  public final static native long PolyDriver_viewIEncoders(long jarg1, PolyDriver jarg1_);
  public final static native long PolyDriver_viewIPidControl(long jarg1, PolyDriver jarg1_);
  public final static native long PolyDriver_viewIAmplifierControl(long jarg1, PolyDriver jarg1_);
  public final static native long PolyDriver_viewIControlLimits(long jarg1, PolyDriver jarg1_);
  public final static native void delete_IFrameGrabber(long jarg1);
  public final static native boolean IFrameGrabber_getRawBuffer(long jarg1, IFrameGrabber jarg1_, long jarg2);
  public final static native int IFrameGrabber_getRawBufferSize(long jarg1, IFrameGrabber jarg1_);
  public final static native int IFrameGrabber_height(long jarg1, IFrameGrabber jarg1_);
  public final static native int IFrameGrabber_width(long jarg1, IFrameGrabber jarg1_);
  public final static native void delete_IFrameGrabberRgb(long jarg1);
  public final static native boolean IFrameGrabberRgb_getRgbBuffer(long jarg1, IFrameGrabberRgb jarg1_, long jarg2);
  public final static native int IFrameGrabberRgb_height(long jarg1, IFrameGrabberRgb jarg1_);
  public final static native int IFrameGrabberRgb_width(long jarg1, IFrameGrabberRgb jarg1_);
  public final static native void delete_IFrameGrabberImage(long jarg1);
  public final static native boolean IFrameGrabberImage_getImage(long jarg1, IFrameGrabberImage jarg1_, long jarg2, ImageRgb jarg2_);
  public final static native int IFrameGrabberImage_height(long jarg1, IFrameGrabberImage jarg1_);
  public final static native int IFrameGrabberImage_width(long jarg1, IFrameGrabberImage jarg1_);
  public final static native void delete_IFrameWriterImage(long jarg1);
  public final static native boolean IFrameWriterImage_putImage(long jarg1, IFrameWriterImage jarg1_, long jarg2, ImageRgb jarg2_);
  public final static native void delete_IFrameGrabberControls(long jarg1);
  public final static native boolean IFrameGrabberControls_setBrightness(long jarg1, IFrameGrabberControls jarg1_, double jarg2);
  public final static native boolean IFrameGrabberControls_setExposure(long jarg1, IFrameGrabberControls jarg1_, double jarg2);
  public final static native boolean IFrameGrabberControls_setSharpness(long jarg1, IFrameGrabberControls jarg1_, double jarg2);
  public final static native boolean IFrameGrabberControls_setWhiteBalance(long jarg1, IFrameGrabberControls jarg1_, double jarg2, double jarg3);
  public final static native boolean IFrameGrabberControls_setHue(long jarg1, IFrameGrabberControls jarg1_, double jarg2);
  public final static native boolean IFrameGrabberControls_setSaturation(long jarg1, IFrameGrabberControls jarg1_, double jarg2);
  public final static native boolean IFrameGrabberControls_setGamma(long jarg1, IFrameGrabberControls jarg1_, double jarg2);
  public final static native boolean IFrameGrabberControls_setShutter(long jarg1, IFrameGrabberControls jarg1_, double jarg2);
  public final static native boolean IFrameGrabberControls_setGain(long jarg1, IFrameGrabberControls jarg1_, double jarg2);
  public final static native boolean IFrameGrabberControls_setIris(long jarg1, IFrameGrabberControls jarg1_, double jarg2);
  public final static native double IFrameGrabberControls_getBrightness(long jarg1, IFrameGrabberControls jarg1_);
  public final static native double IFrameGrabberControls_getExposure(long jarg1, IFrameGrabberControls jarg1_);
  public final static native double IFrameGrabberControls_getSharpness(long jarg1, IFrameGrabberControls jarg1_);
  public final static native boolean IFrameGrabberControls_getWhiteBalance(long jarg1, IFrameGrabberControls jarg1_, long jarg2, long jarg3);
  public final static native double IFrameGrabberControls_getHue(long jarg1, IFrameGrabberControls jarg1_);
  public final static native double IFrameGrabberControls_getSaturation(long jarg1, IFrameGrabberControls jarg1_);
  public final static native double IFrameGrabberControls_getGamma(long jarg1, IFrameGrabberControls jarg1_);
  public final static native double IFrameGrabberControls_getShutter(long jarg1, IFrameGrabberControls jarg1_);
  public final static native double IFrameGrabberControls_getGain(long jarg1, IFrameGrabberControls jarg1_);
  public final static native double IFrameGrabberControls_getIris(long jarg1, IFrameGrabberControls jarg1_);
  public final static native void delete_IAudioVisualGrabber(long jarg1);
  public final static native boolean IAudioVisualGrabber_getAudioVisual(long jarg1, IAudioVisualGrabber jarg1_, long jarg2, ImageRgb jarg2_, long jarg3, Sound jarg3_);
  public final static native void delete_IFrameWriterAudioVisual(long jarg1);
  public final static native boolean IFrameWriterAudioVisual_putAudioVisual(long jarg1, IFrameWriterAudioVisual jarg1_, long jarg2, ImageRgb jarg2_, long jarg3, Sound jarg3_);
  public final static native void delete_IAudioVisualStream(long jarg1);
  public final static native boolean IAudioVisualStream_hasAudio(long jarg1, IAudioVisualStream jarg1_);
  public final static native boolean IAudioVisualStream_hasVideo(long jarg1, IAudioVisualStream jarg1_);
  public final static native void delete_IPidControlRaw(long jarg1);
  public final static native boolean IPidControlRaw_setPidRaw(long jarg1, IPidControlRaw jarg1_, int jarg2, long jarg3);
  public final static native boolean IPidControlRaw_setPidsRaw(long jarg1, IPidControlRaw jarg1_, long jarg2);
  public final static native boolean IPidControlRaw_setReferenceRaw(long jarg1, IPidControlRaw jarg1_, int jarg2, double jarg3);
  public final static native boolean IPidControlRaw_setReferencesRaw(long jarg1, IPidControlRaw jarg1_, long jarg2);
  public final static native boolean IPidControlRaw_setErrorLimitRaw(long jarg1, IPidControlRaw jarg1_, int jarg2, double jarg3);
  public final static native boolean IPidControlRaw_setErrorLimitsRaw(long jarg1, IPidControlRaw jarg1_, long jarg2);
  public final static native boolean IPidControlRaw_getErrorRaw(long jarg1, IPidControlRaw jarg1_, int jarg2, long jarg3);
  public final static native boolean IPidControlRaw_getErrorsRaw(long jarg1, IPidControlRaw jarg1_, long jarg2);
  public final static native boolean IPidControlRaw_getOutputRaw(long jarg1, IPidControlRaw jarg1_, int jarg2, long jarg3);
  public final static native boolean IPidControlRaw_getOutputsRaw(long jarg1, IPidControlRaw jarg1_, long jarg2);
  public final static native boolean IPidControlRaw_getPidRaw(long jarg1, IPidControlRaw jarg1_, int jarg2, long jarg3);
  public final static native boolean IPidControlRaw_getPidsRaw(long jarg1, IPidControlRaw jarg1_, long jarg2);
  public final static native boolean IPidControlRaw_getReferenceRaw(long jarg1, IPidControlRaw jarg1_, int jarg2, long jarg3);
  public final static native boolean IPidControlRaw_getReferencesRaw(long jarg1, IPidControlRaw jarg1_, long jarg2);
  public final static native boolean IPidControlRaw_getErrorLimitRaw(long jarg1, IPidControlRaw jarg1_, int jarg2, long jarg3);
  public final static native boolean IPidControlRaw_getErrorLimitsRaw(long jarg1, IPidControlRaw jarg1_, long jarg2);
  public final static native boolean IPidControlRaw_resetPidRaw(long jarg1, IPidControlRaw jarg1_, int jarg2);
  public final static native boolean IPidControlRaw_disablePidRaw(long jarg1, IPidControlRaw jarg1_, int jarg2);
  public final static native boolean IPidControlRaw_enablePidRaw(long jarg1, IPidControlRaw jarg1_, int jarg2);
  public final static native boolean IPidControlRaw_setOffsetRaw(long jarg1, IPidControlRaw jarg1_, int jarg2, double jarg3);
  public final static native void delete_IPidControl(long jarg1);
  public final static native boolean IPidControl_setPids__SWIG_0(long jarg1, IPidControl jarg1_, long jarg2);
  public final static native boolean IPidControl_setReference(long jarg1, IPidControl jarg1_, int jarg2, double jarg3);
  public final static native boolean IPidControl_setReferences__SWIG_0(long jarg1, IPidControl jarg1_, long jarg2);
  public final static native boolean IPidControl_setErrorLimit(long jarg1, IPidControl jarg1_, int jarg2, double jarg3);
  public final static native boolean IPidControl_setErrorLimits__SWIG_0(long jarg1, IPidControl jarg1_, long jarg2);
  public final static native boolean IPidControl_getError__SWIG_0(long jarg1, IPidControl jarg1_, int jarg2, long jarg3);
  public final static native boolean IPidControl_getErrors__SWIG_0(long jarg1, IPidControl jarg1_, long jarg2);
  public final static native boolean IPidControl_getOutput__SWIG_0(long jarg1, IPidControl jarg1_, int jarg2, long jarg3);
  public final static native boolean IPidControl_getOutputs__SWIG_0(long jarg1, IPidControl jarg1_, long jarg2);
  public final static native boolean IPidControl_getPids__SWIG_0(long jarg1, IPidControl jarg1_, long jarg2);
  public final static native boolean IPidControl_getReference__SWIG_0(long jarg1, IPidControl jarg1_, int jarg2, long jarg3);
  public final static native boolean IPidControl_getReferences__SWIG_0(long jarg1, IPidControl jarg1_, long jarg2);
  public final static native boolean IPidControl_getErrorLimit__SWIG_0(long jarg1, IPidControl jarg1_, int jarg2, long jarg3);
  public final static native boolean IPidControl_getErrorLimits__SWIG_0(long jarg1, IPidControl jarg1_, long jarg2);
  public final static native boolean IPidControl_resetPid(long jarg1, IPidControl jarg1_, int jarg2);
  public final static native boolean IPidControl_disablePid(long jarg1, IPidControl jarg1_, int jarg2);
  public final static native boolean IPidControl_enablePid(long jarg1, IPidControl jarg1_, int jarg2);
  public final static native boolean IPidControl_setOffset(long jarg1, IPidControl jarg1_, int jarg2, double jarg3);
  public final static native boolean IPidControl_setReferences__SWIG_1(long jarg1, IPidControl jarg1_, long jarg2, DVector jarg2_);
  public final static native boolean IPidControl_getReference__SWIG_1(long jarg1, IPidControl jarg1_, int jarg2, long jarg3, DVector jarg3_);
  public final static native boolean IPidControl_getReferences__SWIG_1(long jarg1, IPidControl jarg1_, long jarg2, DVector jarg2_);
  public final static native boolean IPidControl_setErrorLimits__SWIG_1(long jarg1, IPidControl jarg1_, long jarg2, DVector jarg2_);
  public final static native boolean IPidControl_getErrorLimit__SWIG_1(long jarg1, IPidControl jarg1_, int jarg2, long jarg3, DVector jarg3_);
  public final static native boolean IPidControl_getErrorLimits__SWIG_1(long jarg1, IPidControl jarg1_, long jarg2, DVector jarg2_);
  public final static native boolean IPidControl_getError__SWIG_1(long jarg1, IPidControl jarg1_, int jarg2, long jarg3, DVector jarg3_);
  public final static native boolean IPidControl_getErrors__SWIG_1(long jarg1, IPidControl jarg1_, long jarg2, DVector jarg2_);
  public final static native boolean IPidControl_getOutput__SWIG_1(long jarg1, IPidControl jarg1_, int jarg2, long jarg3, DVector jarg3_);
  public final static native boolean IPidControl_getOutputs__SWIG_1(long jarg1, IPidControl jarg1_, long jarg2, DVector jarg2_);
  public final static native boolean IPidControl_setPid(long jarg1, IPidControl jarg1_, int jarg2, long jarg3, Pid jarg3_);
  public final static native boolean IPidControl_setPids__SWIG_1(long jarg1, IPidControl jarg1_, long jarg2, PidVector jarg2_);
  public final static native boolean IPidControl_getPid(long jarg1, IPidControl jarg1_, int jarg2, long jarg3, PidVector jarg3_);
  public final static native boolean IPidControl_getPids__SWIG_1(long jarg1, IPidControl jarg1_, long jarg2, PidVector jarg2_);
  public final static native void delete_IPositionControlRaw(long jarg1);
  public final static native boolean IPositionControlRaw_getAxes(long jarg1, IPositionControlRaw jarg1_, long jarg2);
  public final static native boolean IPositionControlRaw_setPositionMode(long jarg1, IPositionControlRaw jarg1_);
  public final static native boolean IPositionControlRaw_positionMoveRaw__SWIG_0(long jarg1, IPositionControlRaw jarg1_, int jarg2, double jarg3);
  public final static native boolean IPositionControlRaw_positionMoveRaw__SWIG_1(long jarg1, IPositionControlRaw jarg1_, long jarg2);
  public final static native boolean IPositionControlRaw_relativeMoveRaw__SWIG_0(long jarg1, IPositionControlRaw jarg1_, int jarg2, double jarg3);
  public final static native boolean IPositionControlRaw_relativeMoveRaw__SWIG_1(long jarg1, IPositionControlRaw jarg1_, long jarg2);
  public final static native boolean IPositionControlRaw_checkMotionDoneRaw__SWIG_0(long jarg1, IPositionControlRaw jarg1_, int jarg2, long jarg3);
  public final static native boolean IPositionControlRaw_checkMotionDoneRaw__SWIG_1(long jarg1, IPositionControlRaw jarg1_, long jarg2);
  public final static native boolean IPositionControlRaw_setRefSpeedRaw(long jarg1, IPositionControlRaw jarg1_, int jarg2, double jarg3);
  public final static native boolean IPositionControlRaw_setRefSpeedsRaw(long jarg1, IPositionControlRaw jarg1_, long jarg2);
  public final static native boolean IPositionControlRaw_setRefAccelerationRaw(long jarg1, IPositionControlRaw jarg1_, int jarg2, double jarg3);
  public final static native boolean IPositionControlRaw_setRefAccelerationsRaw(long jarg1, IPositionControlRaw jarg1_, long jarg2);
  public final static native boolean IPositionControlRaw_getRefSpeedRaw(long jarg1, IPositionControlRaw jarg1_, int jarg2, long jarg3);
  public final static native boolean IPositionControlRaw_getRefSpeedsRaw(long jarg1, IPositionControlRaw jarg1_, long jarg2);
  public final static native boolean IPositionControlRaw_getRefAccelerationRaw(long jarg1, IPositionControlRaw jarg1_, int jarg2, long jarg3);
  public final static native boolean IPositionControlRaw_getRefAccelerationsRaw(long jarg1, IPositionControlRaw jarg1_, long jarg2);
  public final static native boolean IPositionControlRaw_stopRaw__SWIG_0(long jarg1, IPositionControlRaw jarg1_, int jarg2);
  public final static native boolean IPositionControlRaw_stopRaw__SWIG_1(long jarg1, IPositionControlRaw jarg1_);
  public final static native void delete_IPositionControl(long jarg1);
  public final static native boolean IPositionControl_getAxes__SWIG_0(long jarg1, IPositionControl jarg1_, long jarg2);
  public final static native boolean IPositionControl_setPositionMode(long jarg1, IPositionControl jarg1_);
  public final static native boolean IPositionControl_positionMove__SWIG_0(long jarg1, IPositionControl jarg1_, int jarg2, double jarg3);
  public final static native boolean IPositionControl_positionMove__SWIG_1(long jarg1, IPositionControl jarg1_, long jarg2);
  public final static native boolean IPositionControl_relativeMove__SWIG_0(long jarg1, IPositionControl jarg1_, int jarg2, double jarg3);
  public final static native boolean IPositionControl_relativeMove__SWIG_1(long jarg1, IPositionControl jarg1_, long jarg2);
  public final static native boolean IPositionControl_checkMotionDone__SWIG_0(long jarg1, IPositionControl jarg1_, int jarg2, long jarg3);
  public final static native boolean IPositionControl_checkMotionDone__SWIG_1(long jarg1, IPositionControl jarg1_, long jarg2);
  public final static native boolean IPositionControl_setRefSpeed(long jarg1, IPositionControl jarg1_, int jarg2, double jarg3);
  public final static native boolean IPositionControl_setRefSpeeds__SWIG_0(long jarg1, IPositionControl jarg1_, long jarg2);
  public final static native boolean IPositionControl_setRefAcceleration(long jarg1, IPositionControl jarg1_, int jarg2, double jarg3);
  public final static native boolean IPositionControl_setRefAccelerations(long jarg1, IPositionControl jarg1_, long jarg2);
  public final static native boolean IPositionControl_getRefSpeed__SWIG_0(long jarg1, IPositionControl jarg1_, int jarg2, long jarg3);
  public final static native boolean IPositionControl_getRefSpeeds__SWIG_0(long jarg1, IPositionControl jarg1_, long jarg2);
  public final static native boolean IPositionControl_getRefAcceleration__SWIG_0(long jarg1, IPositionControl jarg1_, int jarg2, long jarg3);
  public final static native boolean IPositionControl_getRefAccelerations__SWIG_0(long jarg1, IPositionControl jarg1_, long jarg2);
  public final static native boolean IPositionControl_stop__SWIG_0(long jarg1, IPositionControl jarg1_, int jarg2);
  public final static native boolean IPositionControl_stop__SWIG_1(long jarg1, IPositionControl jarg1_);
  public final static native int IPositionControl_getAxes__SWIG_1(long jarg1, IPositionControl jarg1_);
  public final static native boolean IPositionControl_positionMove__SWIG_2(long jarg1, IPositionControl jarg1_, long jarg2, DVector jarg2_);
  public final static native boolean IPositionControl_relativeMove__SWIG_2(long jarg1, IPositionControl jarg1_, long jarg2, DVector jarg2_);
  public final static native boolean IPositionControl_setRefSpeeds__SWIG_1(long jarg1, IPositionControl jarg1_, long jarg2, DVector jarg2_);
  public final static native boolean IPositionControl_getRefSpeed__SWIG_1(long jarg1, IPositionControl jarg1_, int jarg2, long jarg3, DVector jarg3_);
  public final static native boolean IPositionControl_getRefSpeeds__SWIG_1(long jarg1, IPositionControl jarg1_, long jarg2, DVector jarg2_);
  public final static native boolean IPositionControl_getRefAcceleration__SWIG_1(long jarg1, IPositionControl jarg1_, int jarg2, long jarg3, DVector jarg3_);
  public final static native boolean IPositionControl_getRefAccelerations__SWIG_1(long jarg1, IPositionControl jarg1_, long jarg2, DVector jarg2_);
  public final static native void delete_IVelocityControlRaw(long jarg1);
  public final static native boolean IVelocityControlRaw_getAxes(long jarg1, IVelocityControlRaw jarg1_, long jarg2);
  public final static native boolean IVelocityControlRaw_setVelocityMode(long jarg1, IVelocityControlRaw jarg1_);
  public final static native boolean IVelocityControlRaw_velocityMoveRaw__SWIG_0(long jarg1, IVelocityControlRaw jarg1_, int jarg2, double jarg3);
  public final static native boolean IVelocityControlRaw_velocityMoveRaw__SWIG_1(long jarg1, IVelocityControlRaw jarg1_, long jarg2);
  public final static native boolean IVelocityControlRaw_setRefAccelerationRaw(long jarg1, IVelocityControlRaw jarg1_, int jarg2, double jarg3);
  public final static native boolean IVelocityControlRaw_setRefAccelerationsRaw(long jarg1, IVelocityControlRaw jarg1_, long jarg2);
  public final static native boolean IVelocityControlRaw_getRefAccelerationRaw(long jarg1, IVelocityControlRaw jarg1_, int jarg2, long jarg3);
  public final static native boolean IVelocityControlRaw_getRefAccelerationsRaw(long jarg1, IVelocityControlRaw jarg1_, long jarg2);
  public final static native boolean IVelocityControlRaw_stopRaw__SWIG_0(long jarg1, IVelocityControlRaw jarg1_, int jarg2);
  public final static native boolean IVelocityControlRaw_stopRaw__SWIG_1(long jarg1, IVelocityControlRaw jarg1_);
  public final static native void delete_IVelocityControl(long jarg1);
  public final static native boolean IVelocityControl_getAxes__SWIG_0(long jarg1, IVelocityControl jarg1_, long jarg2);
  public final static native boolean IVelocityControl_setVelocityMode(long jarg1, IVelocityControl jarg1_);
  public final static native boolean IVelocityControl_velocityMove__SWIG_0(long jarg1, IVelocityControl jarg1_, int jarg2, double jarg3);
  public final static native boolean IVelocityControl_velocityMove__SWIG_1(long jarg1, IVelocityControl jarg1_, long jarg2);
  public final static native boolean IVelocityControl_setRefAcceleration(long jarg1, IVelocityControl jarg1_, int jarg2, double jarg3);
  public final static native boolean IVelocityControl_setRefAccelerations__SWIG_0(long jarg1, IVelocityControl jarg1_, long jarg2);
  public final static native boolean IVelocityControl_getRefAcceleration__SWIG_0(long jarg1, IVelocityControl jarg1_, int jarg2, long jarg3);
  public final static native boolean IVelocityControl_getRefAccelerations__SWIG_0(long jarg1, IVelocityControl jarg1_, long jarg2);
  public final static native boolean IVelocityControl_stop__SWIG_0(long jarg1, IVelocityControl jarg1_, int jarg2);
  public final static native boolean IVelocityControl_stop__SWIG_1(long jarg1, IVelocityControl jarg1_);
  public final static native int IVelocityControl_getAxes__SWIG_1(long jarg1, IVelocityControl jarg1_);
  public final static native boolean IVelocityControl_velocityMove__SWIG_2(long jarg1, IVelocityControl jarg1_, long jarg2, DVector jarg2_);
  public final static native boolean IVelocityControl_setRefAccelerations__SWIG_1(long jarg1, IVelocityControl jarg1_, long jarg2, DVector jarg2_);
  public final static native boolean IVelocityControl_getRefAcceleration__SWIG_1(long jarg1, IVelocityControl jarg1_, int jarg2, long jarg3, DVector jarg3_);
  public final static native boolean IVelocityControl_getRefAccelerations__SWIG_1(long jarg1, IVelocityControl jarg1_, long jarg2, DVector jarg2_);
  public final static native void delete_ITorqueControlRaw(long jarg1);
  public final static native boolean ITorqueControlRaw_getAxes(long jarg1, ITorqueControlRaw jarg1_, long jarg2);
  public final static native boolean ITorqueControlRaw_setTorqueMode(long jarg1, ITorqueControlRaw jarg1_);
  public final static native double ITorqueControlRaw_getRefTorqueRaw(long jarg1, ITorqueControlRaw jarg1_, int jarg2);
  public final static native void ITorqueControlRaw_getRefTorquesRaw(long jarg1, ITorqueControlRaw jarg1_, long jarg2);
  public final static native boolean ITorqueControlRaw_setTorquesRaw(long jarg1, ITorqueControlRaw jarg1_, long jarg2);
  public final static native void ITorqueControlRaw_setTorqueRaw(long jarg1, ITorqueControlRaw jarg1_, int jarg2, double jarg3);
  public final static native void delete_IEncodersRaw(long jarg1);
  public final static native boolean IEncodersRaw_getAxes(long jarg1, IEncodersRaw jarg1_, long jarg2);
  public final static native boolean IEncodersRaw_resetEncoderRaw(long jarg1, IEncodersRaw jarg1_, int jarg2);
  public final static native boolean IEncodersRaw_resetEncodersRaw(long jarg1, IEncodersRaw jarg1_);
  public final static native boolean IEncodersRaw_setEncoderRaw(long jarg1, IEncodersRaw jarg1_, int jarg2, double jarg3);
  public final static native boolean IEncodersRaw_setEncodersRaw(long jarg1, IEncodersRaw jarg1_, long jarg2);
  public final static native boolean IEncodersRaw_getEncoderRaw(long jarg1, IEncodersRaw jarg1_, int jarg2, long jarg3);
  public final static native boolean IEncodersRaw_getEncodersRaw(long jarg1, IEncodersRaw jarg1_, long jarg2);
  public final static native boolean IEncodersRaw_getEncoderSpeedRaw(long jarg1, IEncodersRaw jarg1_, int jarg2, long jarg3);
  public final static native boolean IEncodersRaw_getEncoderSpeedsRaw(long jarg1, IEncodersRaw jarg1_, long jarg2);
  public final static native boolean IEncodersRaw_getEncoderAccelerationRaw(long jarg1, IEncodersRaw jarg1_, int jarg2, long jarg3);
  public final static native boolean IEncodersRaw_getEncoderAccelerationsRaw(long jarg1, IEncodersRaw jarg1_, long jarg2);
  public final static native void delete_IEncoders(long jarg1);
  public final static native boolean IEncoders_getAxes__SWIG_0(long jarg1, IEncoders jarg1_, long jarg2);
  public final static native boolean IEncoders_resetEncoder(long jarg1, IEncoders jarg1_, int jarg2);
  public final static native boolean IEncoders_resetEncoders(long jarg1, IEncoders jarg1_);
  public final static native boolean IEncoders_setEncoder(long jarg1, IEncoders jarg1_, int jarg2, double jarg3);
  public final static native boolean IEncoders_setEncoders__SWIG_0(long jarg1, IEncoders jarg1_, long jarg2);
  public final static native boolean IEncoders_getEncoder__SWIG_0(long jarg1, IEncoders jarg1_, int jarg2, long jarg3);
  public final static native boolean IEncoders_getEncoders__SWIG_0(long jarg1, IEncoders jarg1_, long jarg2);
  public final static native boolean IEncoders_getEncoderSpeed__SWIG_0(long jarg1, IEncoders jarg1_, int jarg2, long jarg3);
  public final static native boolean IEncoders_getEncoderSpeeds__SWIG_0(long jarg1, IEncoders jarg1_, long jarg2);
  public final static native boolean IEncoders_getEncoderAcceleration__SWIG_0(long jarg1, IEncoders jarg1_, int jarg2, long jarg3);
  public final static native boolean IEncoders_getEncoderAccelerations__SWIG_0(long jarg1, IEncoders jarg1_, long jarg2);
  public final static native int IEncoders_getAxes__SWIG_1(long jarg1, IEncoders jarg1_);
  public final static native boolean IEncoders_setEncoders__SWIG_1(long jarg1, IEncoders jarg1_, long jarg2, DVector jarg2_);
  public final static native double IEncoders_getEncoder__SWIG_1(long jarg1, IEncoders jarg1_, int jarg2);
  public final static native boolean IEncoders_getEncoders__SWIG_1(long jarg1, IEncoders jarg1_, long jarg2, DVector jarg2_);
  public final static native double IEncoders_getEncoderSpeed__SWIG_1(long jarg1, IEncoders jarg1_, int jarg2);
  public final static native boolean IEncoders_getEncoderSpeeds__SWIG_1(long jarg1, IEncoders jarg1_, long jarg2, DVector jarg2_);
  public final static native double IEncoders_getEncoderAcceleration__SWIG_1(long jarg1, IEncoders jarg1_, int jarg2);
  public final static native boolean IEncoders_getEncoderAccelerations__SWIG_1(long jarg1, IEncoders jarg1_, long jarg2, DVector jarg2_);
  public final static native void delete_IAmplifierControl(long jarg1);
  public final static native boolean IAmplifierControl_enableAmp(long jarg1, IAmplifierControl jarg1_, int jarg2);
  public final static native boolean IAmplifierControl_disableAmp(long jarg1, IAmplifierControl jarg1_, int jarg2);
  public final static native boolean IAmplifierControl_getCurrents__SWIG_0(long jarg1, IAmplifierControl jarg1_, long jarg2);
  public final static native boolean IAmplifierControl_getCurrent__SWIG_0(long jarg1, IAmplifierControl jarg1_, int jarg2, long jarg3);
  public final static native boolean IAmplifierControl_setMaxCurrent(long jarg1, IAmplifierControl jarg1_, int jarg2, double jarg3);
  public final static native boolean IAmplifierControl_getAmpStatus(long jarg1, IAmplifierControl jarg1_, long jarg2);
  public final static native boolean IAmplifierControl_getCurrents__SWIG_1(long jarg1, IAmplifierControl jarg1_, long jarg2, DVector jarg2_);
  public final static native boolean IAmplifierControl_getCurrent__SWIG_1(long jarg1, IAmplifierControl jarg1_, int jarg2, long jarg3, DVector jarg3_);
  public final static native void delete_IAmplifierControlRaw(long jarg1);
  public final static native boolean IAmplifierControlRaw_enableAmpRaw(long jarg1, IAmplifierControlRaw jarg1_, int jarg2);
  public final static native boolean IAmplifierControlRaw_disableAmpRaw(long jarg1, IAmplifierControlRaw jarg1_, int jarg2);
  public final static native boolean IAmplifierControlRaw_getCurrentsRaw(long jarg1, IAmplifierControlRaw jarg1_, long jarg2);
  public final static native boolean IAmplifierControlRaw_getCurrentRaw(long jarg1, IAmplifierControlRaw jarg1_, int jarg2, long jarg3);
  public final static native boolean IAmplifierControlRaw_setMaxCurrentRaw(long jarg1, IAmplifierControlRaw jarg1_, int jarg2, double jarg3);
  public final static native boolean IAmplifierControlRaw_getAmpStatusRaw(long jarg1, IAmplifierControlRaw jarg1_, long jarg2);
  public final static native void delete_IControlCalibrationRaw(long jarg1);
  public final static native boolean IControlCalibrationRaw_calibrateRaw(long jarg1, IControlCalibrationRaw jarg1_, int jarg2, double jarg3);
  public final static native boolean IControlCalibrationRaw_doneRaw(long jarg1, IControlCalibrationRaw jarg1_, int jarg2);
  public final static native void delete_IControlCalibration2Raw(long jarg1);
  public final static native boolean IControlCalibration2Raw_calibrate2Raw(long jarg1, IControlCalibration2Raw jarg1_, int jarg2, long jarg3, double jarg4, double jarg5, double jarg6);
  public final static native boolean IControlCalibration2Raw_doneRaw(long jarg1, IControlCalibration2Raw jarg1_, int jarg2);
  public final static native void delete_IControlCalibration(long jarg1);
  public final static native boolean IControlCalibration_calibrate__SWIG_0(long jarg1, IControlCalibration jarg1_, int jarg2, double jarg3);
  public final static native boolean IControlCalibration_done(long jarg1, IControlCalibration jarg1_, int jarg2);
  public final static native boolean IControlCalibration_setCalibrator(long jarg1, IControlCalibration jarg1_, long jarg2);
  public final static native boolean IControlCalibration_calibrate__SWIG_1(long jarg1, IControlCalibration jarg1_);
  public final static native boolean IControlCalibration_park__SWIG_0(long jarg1, IControlCalibration jarg1_, boolean jarg2);
  public final static native boolean IControlCalibration_park__SWIG_1(long jarg1, IControlCalibration jarg1_);
  public final static native void delete_IControlCalibration2(long jarg1);
  public final static native boolean IControlCalibration2_calibrate2(long jarg1, IControlCalibration2 jarg1_, int jarg2, long jarg3, double jarg4, double jarg5, double jarg6);
  public final static native boolean IControlCalibration2_done(long jarg1, IControlCalibration2 jarg1_, int jarg2);
  public final static native boolean IControlCalibration2_setCalibrator(long jarg1, IControlCalibration2 jarg1_, long jarg2);
  public final static native boolean IControlCalibration2_calibrate(long jarg1, IControlCalibration2 jarg1_);
  public final static native boolean IControlCalibration2_park__SWIG_0(long jarg1, IControlCalibration2 jarg1_, boolean jarg2);
  public final static native boolean IControlCalibration2_park__SWIG_1(long jarg1, IControlCalibration2 jarg1_);
  public final static native boolean IControlCalibration2_abortCalibration(long jarg1, IControlCalibration2 jarg1_);
  public final static native boolean IControlCalibration2_abortPark(long jarg1, IControlCalibration2 jarg1_);
  public final static native void delete_IControlDebug(long jarg1);
  public final static native boolean IControlDebug_setPrintFunction(long jarg1, IControlDebug jarg1_, long jarg2);
  public final static native boolean IControlDebug_loadBootMemory(long jarg1, IControlDebug jarg1_);
  public final static native boolean IControlDebug_saveBootMemory(long jarg1, IControlDebug jarg1_);
  public final static native void delete_IControlLimits(long jarg1);
  public final static native boolean IControlLimits_setLimits(long jarg1, IControlLimits jarg1_, int jarg2, double jarg3, double jarg4);
  public final static native boolean IControlLimits_getLimits__SWIG_0(long jarg1, IControlLimits jarg1_, int jarg2, long jarg3, long jarg4);
  public final static native boolean IControlLimits_getLimits__SWIG_1(long jarg1, IControlLimits jarg1_, int jarg2, long jarg3, DVector jarg3_, long jarg4, DVector jarg4_);
  public final static native void delete_IControlLimitsRaw(long jarg1);
  public final static native boolean IControlLimitsRaw_setLimitsRaw(long jarg1, IControlLimitsRaw jarg1_, int jarg2, double jarg3, double jarg4);
  public final static native boolean IControlLimitsRaw_getLimitsRaw(long jarg1, IControlLimitsRaw jarg1_, int jarg2, long jarg3, long jarg4);
  public final static native void delete_IAxisInfo(long jarg1);
  public final static native boolean IAxisInfo_getAxisName(long jarg1, IAxisInfo jarg1_, int jarg2, long jarg3, ConstString jarg3_);
  public final static native int VOCAB_CALIBRATE_JOINT_get();
  public final static native int VOCAB_CALIBRATE_get();
  public final static native int VOCAB_ABORTCALIB_get();
  public final static native int VOCAB_ABORTPARK_get();
  public final static native int VOCAB_CALIBRATE_DONE_get();
  public final static native int VOCAB_PARK_get();
  public final static native int VOCAB_SET_get();
  public final static native int VOCAB_GET_get();
  public final static native int VOCAB_IS_get();
  public final static native int VOCAB_FAILED_get();
  public final static native int VOCAB_OK_get();
  public final static native int VOCAB_OFFSET_get();
  public final static native int VOCAB_PID_get();
  public final static native int VOCAB_PIDS_get();
  public final static native int VOCAB_REF_get();
  public final static native int VOCAB_REFS_get();
  public final static native int VOCAB_LIM_get();
  public final static native int VOCAB_LIMS_get();
  public final static native int VOCAB_RESET_get();
  public final static native int VOCAB_DISABLE_get();
  public final static native int VOCAB_ENABLE_get();
  public final static native int VOCAB_ERR_get();
  public final static native int VOCAB_ERRS_get();
  public final static native int VOCAB_OUTPUT_get();
  public final static native int VOCAB_OUTPUTS_get();
  public final static native int VOCAB_REFERENCE_get();
  public final static native int VOCAB_REFERENCES_get();
  public final static native int VOCAB_AXES_get();
  public final static native int VOCAB_MOTION_DONE_get();
  public final static native int VOCAB_MOTION_DONES_get();
  public final static native int VOCAB_POSITION_MODE_get();
  public final static native int VOCAB_POSITION_MOVE_get();
  public final static native int VOCAB_POSITION_MOVES_get();
  public final static native int VOCAB_RELATIVE_MOVE_get();
  public final static native int VOCAB_RELATIVE_MOVES_get();
  public final static native int VOCAB_REF_SPEED_get();
  public final static native int VOCAB_REF_SPEEDS_get();
  public final static native int VOCAB_REF_ACCELERATION_get();
  public final static native int VOCAB_REF_ACCELERATIONS_get();
  public final static native int VOCAB_STOP_get();
  public final static native int VOCAB_STOPS_get();
  public final static native int VOCAB_VELOCITY_MODE_get();
  public final static native int VOCAB_VELOCITY_MOVE_get();
  public final static native int VOCAB_VELOCITY_MOVES_get();
  public final static native int VOCAB_E_RESET_get();
  public final static native int VOCAB_E_RESETS_get();
  public final static native int VOCAB_ENCODER_get();
  public final static native int VOCAB_ENCODERS_get();
  public final static native int VOCAB_ENCODER_SPEED_get();
  public final static native int VOCAB_ENCODER_SPEEDS_get();
  public final static native int VOCAB_ENCODER_ACCELERATION_get();
  public final static native int VOCAB_ENCODER_ACCELERATIONS_get();
  public final static native int VOCAB_AMP_ENABLE_get();
  public final static native int VOCAB_AMP_DISABLE_get();
  public final static native int VOCAB_AMP_CURRENT_get();
  public final static native int VOCAB_AMP_CURRENTS_get();
  public final static native int VOCAB_AMP_MAXCURRENT_get();
  public final static native int VOCAB_AMP_STATUS_get();
  public final static native int VOCAB_LIMITS_get();
  public final static native int VOCAB_INFO_NAME_get();
  public final static native void Pid_kp_set(long jarg1, Pid jarg1_, double jarg2);
  public final static native double Pid_kp_get(long jarg1, Pid jarg1_);
  public final static native void Pid_kd_set(long jarg1, Pid jarg1_, double jarg2);
  public final static native double Pid_kd_get(long jarg1, Pid jarg1_);
  public final static native void Pid_ki_set(long jarg1, Pid jarg1_, double jarg2);
  public final static native double Pid_ki_get(long jarg1, Pid jarg1_);
  public final static native void Pid_max_int_set(long jarg1, Pid jarg1_, double jarg2);
  public final static native double Pid_max_int_get(long jarg1, Pid jarg1_);
  public final static native void Pid_scale_set(long jarg1, Pid jarg1_, double jarg2);
  public final static native double Pid_scale_get(long jarg1, Pid jarg1_);
  public final static native void Pid_max_output_set(long jarg1, Pid jarg1_, double jarg2);
  public final static native double Pid_max_output_get(long jarg1, Pid jarg1_);
  public final static native void Pid_offset_set(long jarg1, Pid jarg1_, double jarg2);
  public final static native double Pid_offset_get(long jarg1, Pid jarg1_);
  public final static native long new_Pid__SWIG_0();
  public final static native void delete_Pid(long jarg1);
  public final static native long new_Pid__SWIG_1(double jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6);
  public final static native void Pid_setMaxInt(long jarg1, Pid jarg1_, double jarg2);
  public final static native void Pid_setMaxOut(long jarg1, Pid jarg1_, double jarg2);
  public final static native long new_DVector__SWIG_0();
  public final static native long new_DVector__SWIG_1(long jarg1);
  public final static native long DVector_size(long jarg1, DVector jarg1_);
  public final static native long DVector_capacity(long jarg1, DVector jarg1_);
  public final static native void DVector_reserve(long jarg1, DVector jarg1_, long jarg2);
  public final static native boolean DVector_isEmpty(long jarg1, DVector jarg1_);
  public final static native void DVector_clear(long jarg1, DVector jarg1_);
  public final static native void DVector_add(long jarg1, DVector jarg1_, double jarg2);
  public final static native double DVector_get(long jarg1, DVector jarg1_, int jarg2);
  public final static native void DVector_set(long jarg1, DVector jarg1_, int jarg2, double jarg3);
  public final static native void delete_DVector(long jarg1);
  public final static native long new_PidVector__SWIG_0();
  public final static native long new_PidVector__SWIG_1(long jarg1);
  public final static native long PidVector_size(long jarg1, PidVector jarg1_);
  public final static native long PidVector_capacity(long jarg1, PidVector jarg1_);
  public final static native void PidVector_reserve(long jarg1, PidVector jarg1_, long jarg2);
  public final static native boolean PidVector_isEmpty(long jarg1, PidVector jarg1_);
  public final static native void PidVector_clear(long jarg1, PidVector jarg1_);
  public final static native void PidVector_add(long jarg1, PidVector jarg1_, long jarg2, Pid jarg2_);
  public final static native long PidVector_get(long jarg1, PidVector jarg1_, int jarg2);
  public final static native void PidVector_set(long jarg1, PidVector jarg1_, int jarg2, long jarg3, Pid jarg3_);
  public final static native void delete_PidVector(long jarg1);
  public final static native void TypedReaderProperty_setStrict__SWIG_0(long jarg1, TypedReaderProperty jarg1_, boolean jarg2);
  public final static native void TypedReaderProperty_setStrict__SWIG_1(long jarg1, TypedReaderProperty jarg1_);
  public final static native long TypedReaderProperty_read__SWIG_0(long jarg1, TypedReaderProperty jarg1_, boolean jarg2);
  public final static native long TypedReaderProperty_read__SWIG_1(long jarg1, TypedReaderProperty jarg1_);
  public final static native long TypedReaderProperty_lastRead(long jarg1, TypedReaderProperty jarg1_);
  public final static native boolean TypedReaderProperty_isClosed(long jarg1, TypedReaderProperty jarg1_);
  public final static native void TypedReaderProperty_useCallback(long jarg1, TypedReaderProperty jarg1_, long jarg2, TypedReaderCallbackProperty jarg2_);
  public final static native int TypedReaderProperty_getPendingReads(long jarg1, TypedReaderProperty jarg1_);
  public final static native void delete_TypedReaderProperty(long jarg1);
  public final static native long TypedReaderProperty_getName(long jarg1, TypedReaderProperty jarg1_);
  public final static native void TypedReaderProperty_setReplier(long jarg1, TypedReaderProperty jarg1_, long jarg2, PortReader jarg2_);
  public final static native long TypedReaderProperty_acquire(long jarg1, TypedReaderProperty jarg1_);
  public final static native void TypedReaderProperty_release(long jarg1, TypedReaderProperty jarg1_, long jarg2);
  public final static native void delete_TypedReaderCallbackProperty(long jarg1);
  public final static native void TypedReaderCallbackProperty_onRead__SWIG_0(long jarg1, TypedReaderCallbackProperty jarg1_, long jarg2, Property jarg2_);
  public final static native void TypedReaderCallbackProperty_onRead__SWIG_1(long jarg1, TypedReaderCallbackProperty jarg1_, long jarg2, Property jarg2_, long jarg3, TypedReaderProperty jarg3_);
  public final static native long new_TypedReaderCallbackProperty();
  public final static native long new_BufferedPortProperty();
  public final static native void delete_BufferedPortProperty(long jarg1);
  public final static native boolean BufferedPortProperty_addOutput__SWIG_0(long jarg1, BufferedPortProperty jarg1_, String jarg2);
  public final static native boolean BufferedPortProperty_addOutput__SWIG_1(long jarg1, BufferedPortProperty jarg1_, String jarg2, String jarg3);
  public final static native boolean BufferedPortProperty_addOutput__SWIG_2(long jarg1, BufferedPortProperty jarg1_, long jarg2, Contact jarg2_);
  public final static native void BufferedPortProperty_close(long jarg1, BufferedPortProperty jarg1_);
  public final static native void BufferedPortProperty_interrupt(long jarg1, BufferedPortProperty jarg1_);
  public final static native int BufferedPortProperty_getPendingReads(long jarg1, BufferedPortProperty jarg1_);
  public final static native long BufferedPortProperty_where(long jarg1, BufferedPortProperty jarg1_);
  public final static native long BufferedPortProperty_getName(long jarg1, BufferedPortProperty jarg1_);
  public final static native long BufferedPortProperty_prepare(long jarg1, BufferedPortProperty jarg1_);
  public final static native void BufferedPortProperty_write__SWIG_0(long jarg1, BufferedPortProperty jarg1_, boolean jarg2);
  public final static native void BufferedPortProperty_write__SWIG_1(long jarg1, BufferedPortProperty jarg1_);
  public final static native void BufferedPortProperty_writeStrict(long jarg1, BufferedPortProperty jarg1_);
  public final static native void BufferedPortProperty_setStrict__SWIG_0(long jarg1, BufferedPortProperty jarg1_, boolean jarg2);
  public final static native void BufferedPortProperty_setStrict__SWIG_1(long jarg1, BufferedPortProperty jarg1_);
  public final static native long BufferedPortProperty_read__SWIG_0(long jarg1, BufferedPortProperty jarg1_, boolean jarg2);
  public final static native long BufferedPortProperty_read__SWIG_1(long jarg1, BufferedPortProperty jarg1_);
  public final static native long BufferedPortProperty_lastRead(long jarg1, BufferedPortProperty jarg1_);
  public final static native boolean BufferedPortProperty_isClosed(long jarg1, BufferedPortProperty jarg1_);
  public final static native void BufferedPortProperty_setReplier(long jarg1, BufferedPortProperty jarg1_, long jarg2, PortReader jarg2_);
  public final static native void BufferedPortProperty_onRead(long jarg1, BufferedPortProperty jarg1_, long jarg2, Property jarg2_);
  public final static native void BufferedPortProperty_useCallback__SWIG_0(long jarg1, BufferedPortProperty jarg1_, long jarg2, TypedReaderCallbackProperty jarg2_);
  public final static native void BufferedPortProperty_useCallback__SWIG_1(long jarg1, BufferedPortProperty jarg1_);
  public final static native boolean BufferedPortProperty_setEnvelope(long jarg1, BufferedPortProperty jarg1_, long jarg2, PortWriter jarg2_);
  public final static native boolean BufferedPortProperty_getEnvelope(long jarg1, BufferedPortProperty jarg1_, long jarg2, PortReader jarg2_);
  public final static native int BufferedPortProperty_getInputCount(long jarg1, BufferedPortProperty jarg1_);
  public final static native int BufferedPortProperty_getOutputCount(long jarg1, BufferedPortProperty jarg1_);
  public final static native void BufferedPortProperty_getReport(long jarg1, BufferedPortProperty jarg1_, long jarg2, PortReport jarg2_);
  public final static native void BufferedPortProperty_setReporter(long jarg1, BufferedPortProperty jarg1_, long jarg2, PortReport jarg2_);
  public final static native long BufferedPortProperty_acquire(long jarg1, BufferedPortProperty jarg1_);
  public final static native void BufferedPortProperty_release(long jarg1, BufferedPortProperty jarg1_, long jarg2);
  public final static native void TypedReaderBottle_setStrict__SWIG_0(long jarg1, TypedReaderBottle jarg1_, boolean jarg2);
  public final static native void TypedReaderBottle_setStrict__SWIG_1(long jarg1, TypedReaderBottle jarg1_);
  public final static native long TypedReaderBottle_read__SWIG_0(long jarg1, TypedReaderBottle jarg1_, boolean jarg2);
  public final static native long TypedReaderBottle_read__SWIG_1(long jarg1, TypedReaderBottle jarg1_);
  public final static native long TypedReaderBottle_lastRead(long jarg1, TypedReaderBottle jarg1_);
  public final static native boolean TypedReaderBottle_isClosed(long jarg1, TypedReaderBottle jarg1_);
  public final static native void TypedReaderBottle_useCallback(long jarg1, TypedReaderBottle jarg1_, long jarg2, BottleCallback jarg2_);
  public final static native int TypedReaderBottle_getPendingReads(long jarg1, TypedReaderBottle jarg1_);
  public final static native void delete_TypedReaderBottle(long jarg1);
  public final static native long TypedReaderBottle_getName(long jarg1, TypedReaderBottle jarg1_);
  public final static native void TypedReaderBottle_setReplier(long jarg1, TypedReaderBottle jarg1_, long jarg2, PortReader jarg2_);
  public final static native long TypedReaderBottle_acquire(long jarg1, TypedReaderBottle jarg1_);
  public final static native void TypedReaderBottle_release(long jarg1, TypedReaderBottle jarg1_, long jarg2);
  public final static native void delete_TypedReaderCallbackBottle(long jarg1);
  public final static native void TypedReaderCallbackBottle_onRead__SWIG_0(long jarg1, TypedReaderCallbackBottle jarg1_, long jarg2, Bottle jarg2_);
  public final static native void TypedReaderCallbackBottle_onRead__SWIG_1(long jarg1, TypedReaderCallbackBottle jarg1_, long jarg2, Bottle jarg2_, long jarg3, TypedReaderBottle jarg3_);
  public final static native long new_TypedReaderCallbackBottle();
  public final static native long new_BufferedPortBottle();
  public final static native void delete_BufferedPortBottle(long jarg1);
  public final static native boolean BufferedPortBottle_addOutput__SWIG_0(long jarg1, BufferedPortBottle jarg1_, String jarg2);
  public final static native boolean BufferedPortBottle_addOutput__SWIG_1(long jarg1, BufferedPortBottle jarg1_, String jarg2, String jarg3);
  public final static native boolean BufferedPortBottle_addOutput__SWIG_2(long jarg1, BufferedPortBottle jarg1_, long jarg2, Contact jarg2_);
  public final static native void BufferedPortBottle_close(long jarg1, BufferedPortBottle jarg1_);
  public final static native void BufferedPortBottle_interrupt(long jarg1, BufferedPortBottle jarg1_);
  public final static native int BufferedPortBottle_getPendingReads(long jarg1, BufferedPortBottle jarg1_);
  public final static native long BufferedPortBottle_where(long jarg1, BufferedPortBottle jarg1_);
  public final static native long BufferedPortBottle_getName(long jarg1, BufferedPortBottle jarg1_);
  public final static native long BufferedPortBottle_prepare(long jarg1, BufferedPortBottle jarg1_);
  public final static native void BufferedPortBottle_write__SWIG_0(long jarg1, BufferedPortBottle jarg1_, boolean jarg2);
  public final static native void BufferedPortBottle_write__SWIG_1(long jarg1, BufferedPortBottle jarg1_);
  public final static native void BufferedPortBottle_writeStrict(long jarg1, BufferedPortBottle jarg1_);
  public final static native void BufferedPortBottle_setStrict__SWIG_0(long jarg1, BufferedPortBottle jarg1_, boolean jarg2);
  public final static native void BufferedPortBottle_setStrict__SWIG_1(long jarg1, BufferedPortBottle jarg1_);
  public final static native long BufferedPortBottle_read__SWIG_0(long jarg1, BufferedPortBottle jarg1_, boolean jarg2);
  public final static native long BufferedPortBottle_read__SWIG_1(long jarg1, BufferedPortBottle jarg1_);
  public final static native long BufferedPortBottle_lastRead(long jarg1, BufferedPortBottle jarg1_);
  public final static native boolean BufferedPortBottle_isClosed(long jarg1, BufferedPortBottle jarg1_);
  public final static native void BufferedPortBottle_setReplier(long jarg1, BufferedPortBottle jarg1_, long jarg2, PortReader jarg2_);
  public final static native void BufferedPortBottle_onRead(long jarg1, BufferedPortBottle jarg1_, long jarg2, Bottle jarg2_);
  public final static native void BufferedPortBottle_useCallback__SWIG_0(long jarg1, BufferedPortBottle jarg1_, long jarg2, BottleCallback jarg2_);
  public final static native void BufferedPortBottle_useCallback__SWIG_1(long jarg1, BufferedPortBottle jarg1_);
  public final static native boolean BufferedPortBottle_setEnvelope(long jarg1, BufferedPortBottle jarg1_, long jarg2, PortWriter jarg2_);
  public final static native boolean BufferedPortBottle_getEnvelope(long jarg1, BufferedPortBottle jarg1_, long jarg2, PortReader jarg2_);
  public final static native int BufferedPortBottle_getInputCount(long jarg1, BufferedPortBottle jarg1_);
  public final static native int BufferedPortBottle_getOutputCount(long jarg1, BufferedPortBottle jarg1_);
  public final static native void BufferedPortBottle_getReport(long jarg1, BufferedPortBottle jarg1_, long jarg2, PortReport jarg2_);
  public final static native void BufferedPortBottle_setReporter(long jarg1, BufferedPortBottle jarg1_, long jarg2, PortReport jarg2_);
  public final static native long BufferedPortBottle_acquire(long jarg1, BufferedPortBottle jarg1_);
  public final static native void BufferedPortBottle_release(long jarg1, BufferedPortBottle jarg1_, long jarg2);
  public final static native int ImageRgb_getPixelSize(long jarg1, ImageRgb jarg1_);
  public final static native int ImageRgb_getPixelCode(long jarg1, ImageRgb jarg1_);
  public final static native long ImageRgb_pixel(long jarg1, ImageRgb jarg1_, int jarg2, int jarg3);
  public final static native long ImageRgb_access(long jarg1, ImageRgb jarg1_, int jarg2, int jarg3);
  public final static native long ImageRgb_safePixel(long jarg1, ImageRgb jarg1_, int jarg2, int jarg3);
  public final static native long new_ImageRgb();
  public final static native void delete_ImageRgb(long jarg1);
  public final static native void TypedReaderImageRgb_setStrict__SWIG_0(long jarg1, TypedReaderImageRgb jarg1_, boolean jarg2);
  public final static native void TypedReaderImageRgb_setStrict__SWIG_1(long jarg1, TypedReaderImageRgb jarg1_);
  public final static native long TypedReaderImageRgb_read__SWIG_0(long jarg1, TypedReaderImageRgb jarg1_, boolean jarg2);
  public final static native long TypedReaderImageRgb_read__SWIG_1(long jarg1, TypedReaderImageRgb jarg1_);
  public final static native long TypedReaderImageRgb_lastRead(long jarg1, TypedReaderImageRgb jarg1_);
  public final static native boolean TypedReaderImageRgb_isClosed(long jarg1, TypedReaderImageRgb jarg1_);
  public final static native void TypedReaderImageRgb_useCallback(long jarg1, TypedReaderImageRgb jarg1_, long jarg2, TypedReaderCallbackImageRgb jarg2_);
  public final static native int TypedReaderImageRgb_getPendingReads(long jarg1, TypedReaderImageRgb jarg1_);
  public final static native void delete_TypedReaderImageRgb(long jarg1);
  public final static native long TypedReaderImageRgb_getName(long jarg1, TypedReaderImageRgb jarg1_);
  public final static native void TypedReaderImageRgb_setReplier(long jarg1, TypedReaderImageRgb jarg1_, long jarg2, PortReader jarg2_);
  public final static native long TypedReaderImageRgb_acquire(long jarg1, TypedReaderImageRgb jarg1_);
  public final static native void TypedReaderImageRgb_release(long jarg1, TypedReaderImageRgb jarg1_, long jarg2);
  public final static native void delete_TypedReaderCallbackImageRgb(long jarg1);
  public final static native void TypedReaderCallbackImageRgb_onRead__SWIG_0(long jarg1, TypedReaderCallbackImageRgb jarg1_, long jarg2, ImageRgb jarg2_);
  public final static native void TypedReaderCallbackImageRgb_onRead__SWIG_1(long jarg1, TypedReaderCallbackImageRgb jarg1_, long jarg2, ImageRgb jarg2_, long jarg3, TypedReaderImageRgb jarg3_);
  public final static native long new_TypedReaderCallbackImageRgb();
  public final static native long new_BufferedPortImageRgb();
  public final static native void delete_BufferedPortImageRgb(long jarg1);
  public final static native boolean BufferedPortImageRgb_addOutput__SWIG_0(long jarg1, BufferedPortImageRgb jarg1_, String jarg2);
  public final static native boolean BufferedPortImageRgb_addOutput__SWIG_1(long jarg1, BufferedPortImageRgb jarg1_, String jarg2, String jarg3);
  public final static native boolean BufferedPortImageRgb_addOutput__SWIG_2(long jarg1, BufferedPortImageRgb jarg1_, long jarg2, Contact jarg2_);
  public final static native void BufferedPortImageRgb_close(long jarg1, BufferedPortImageRgb jarg1_);
  public final static native void BufferedPortImageRgb_interrupt(long jarg1, BufferedPortImageRgb jarg1_);
  public final static native int BufferedPortImageRgb_getPendingReads(long jarg1, BufferedPortImageRgb jarg1_);
  public final static native long BufferedPortImageRgb_where(long jarg1, BufferedPortImageRgb jarg1_);
  public final static native long BufferedPortImageRgb_getName(long jarg1, BufferedPortImageRgb jarg1_);
  public final static native long BufferedPortImageRgb_prepare(long jarg1, BufferedPortImageRgb jarg1_);
  public final static native void BufferedPortImageRgb_write__SWIG_0(long jarg1, BufferedPortImageRgb jarg1_, boolean jarg2);
  public final static native void BufferedPortImageRgb_write__SWIG_1(long jarg1, BufferedPortImageRgb jarg1_);
  public final static native void BufferedPortImageRgb_writeStrict(long jarg1, BufferedPortImageRgb jarg1_);
  public final static native void BufferedPortImageRgb_setStrict__SWIG_0(long jarg1, BufferedPortImageRgb jarg1_, boolean jarg2);
  public final static native void BufferedPortImageRgb_setStrict__SWIG_1(long jarg1, BufferedPortImageRgb jarg1_);
  public final static native long BufferedPortImageRgb_read__SWIG_0(long jarg1, BufferedPortImageRgb jarg1_, boolean jarg2);
  public final static native long BufferedPortImageRgb_read__SWIG_1(long jarg1, BufferedPortImageRgb jarg1_);
  public final static native long BufferedPortImageRgb_lastRead(long jarg1, BufferedPortImageRgb jarg1_);
  public final static native boolean BufferedPortImageRgb_isClosed(long jarg1, BufferedPortImageRgb jarg1_);
  public final static native void BufferedPortImageRgb_setReplier(long jarg1, BufferedPortImageRgb jarg1_, long jarg2, PortReader jarg2_);
  public final static native void BufferedPortImageRgb_onRead(long jarg1, BufferedPortImageRgb jarg1_, long jarg2, ImageRgb jarg2_);
  public final static native void BufferedPortImageRgb_useCallback__SWIG_0(long jarg1, BufferedPortImageRgb jarg1_, long jarg2, TypedReaderCallbackImageRgb jarg2_);
  public final static native void BufferedPortImageRgb_useCallback__SWIG_1(long jarg1, BufferedPortImageRgb jarg1_);
  public final static native boolean BufferedPortImageRgb_setEnvelope(long jarg1, BufferedPortImageRgb jarg1_, long jarg2, PortWriter jarg2_);
  public final static native boolean BufferedPortImageRgb_getEnvelope(long jarg1, BufferedPortImageRgb jarg1_, long jarg2, PortReader jarg2_);
  public final static native int BufferedPortImageRgb_getInputCount(long jarg1, BufferedPortImageRgb jarg1_);
  public final static native int BufferedPortImageRgb_getOutputCount(long jarg1, BufferedPortImageRgb jarg1_);
  public final static native void BufferedPortImageRgb_getReport(long jarg1, BufferedPortImageRgb jarg1_, long jarg2, PortReport jarg2_);
  public final static native void BufferedPortImageRgb_setReporter(long jarg1, BufferedPortImageRgb jarg1_, long jarg2, PortReport jarg2_);
  public final static native long BufferedPortImageRgb_acquire(long jarg1, BufferedPortImageRgb jarg1_);
  public final static native void BufferedPortImageRgb_release(long jarg1, BufferedPortImageRgb jarg1_, long jarg2);
  public final static native int ImageFloat_getPixelSize(long jarg1, ImageFloat jarg1_);
  public final static native int ImageFloat_getPixelCode(long jarg1, ImageFloat jarg1_);
  public final static native long ImageFloat_pixel(long jarg1, ImageFloat jarg1_, int jarg2, int jarg3);
  public final static native long ImageFloat_access(long jarg1, ImageFloat jarg1_, int jarg2, int jarg3);
  public final static native long ImageFloat_safePixel(long jarg1, ImageFloat jarg1_, int jarg2, int jarg3);
  public final static native float ImageFloat_getPixel(long jarg1, ImageFloat jarg1_, int jarg2, int jarg3);
  public final static native void ImageFloat_setPixel(long jarg1, ImageFloat jarg1_, int jarg2, int jarg3, float jarg4);
  public final static native long new_ImageFloat();
  public final static native void delete_ImageFloat(long jarg1);
  public final static native void TypedReaderImageFloat_setStrict__SWIG_0(long jarg1, TypedReaderImageFloat jarg1_, boolean jarg2);
  public final static native void TypedReaderImageFloat_setStrict__SWIG_1(long jarg1, TypedReaderImageFloat jarg1_);
  public final static native long TypedReaderImageFloat_read__SWIG_0(long jarg1, TypedReaderImageFloat jarg1_, boolean jarg2);
  public final static native long TypedReaderImageFloat_read__SWIG_1(long jarg1, TypedReaderImageFloat jarg1_);
  public final static native long TypedReaderImageFloat_lastRead(long jarg1, TypedReaderImageFloat jarg1_);
  public final static native boolean TypedReaderImageFloat_isClosed(long jarg1, TypedReaderImageFloat jarg1_);
  public final static native void TypedReaderImageFloat_useCallback(long jarg1, TypedReaderImageFloat jarg1_, long jarg2, TypedReaderCallbackImageFloat jarg2_);
  public final static native int TypedReaderImageFloat_getPendingReads(long jarg1, TypedReaderImageFloat jarg1_);
  public final static native void delete_TypedReaderImageFloat(long jarg1);
  public final static native long TypedReaderImageFloat_getName(long jarg1, TypedReaderImageFloat jarg1_);
  public final static native void TypedReaderImageFloat_setReplier(long jarg1, TypedReaderImageFloat jarg1_, long jarg2, PortReader jarg2_);
  public final static native long TypedReaderImageFloat_acquire(long jarg1, TypedReaderImageFloat jarg1_);
  public final static native void TypedReaderImageFloat_release(long jarg1, TypedReaderImageFloat jarg1_, long jarg2);
  public final static native void delete_TypedReaderCallbackImageFloat(long jarg1);
  public final static native void TypedReaderCallbackImageFloat_onRead__SWIG_0(long jarg1, TypedReaderCallbackImageFloat jarg1_, long jarg2, ImageFloat jarg2_);
  public final static native void TypedReaderCallbackImageFloat_onRead__SWIG_1(long jarg1, TypedReaderCallbackImageFloat jarg1_, long jarg2, ImageFloat jarg2_, long jarg3, TypedReaderImageFloat jarg3_);
  public final static native long new_TypedReaderCallbackImageFloat();
  public final static native long new_BufferedPortImageFloat();
  public final static native void delete_BufferedPortImageFloat(long jarg1);
  public final static native boolean BufferedPortImageFloat_addOutput__SWIG_0(long jarg1, BufferedPortImageFloat jarg1_, String jarg2);
  public final static native boolean BufferedPortImageFloat_addOutput__SWIG_1(long jarg1, BufferedPortImageFloat jarg1_, String jarg2, String jarg3);
  public final static native boolean BufferedPortImageFloat_addOutput__SWIG_2(long jarg1, BufferedPortImageFloat jarg1_, long jarg2, Contact jarg2_);
  public final static native void BufferedPortImageFloat_close(long jarg1, BufferedPortImageFloat jarg1_);
  public final static native void BufferedPortImageFloat_interrupt(long jarg1, BufferedPortImageFloat jarg1_);
  public final static native int BufferedPortImageFloat_getPendingReads(long jarg1, BufferedPortImageFloat jarg1_);
  public final static native long BufferedPortImageFloat_where(long jarg1, BufferedPortImageFloat jarg1_);
  public final static native long BufferedPortImageFloat_getName(long jarg1, BufferedPortImageFloat jarg1_);
  public final static native long BufferedPortImageFloat_prepare(long jarg1, BufferedPortImageFloat jarg1_);
  public final static native void BufferedPortImageFloat_write__SWIG_0(long jarg1, BufferedPortImageFloat jarg1_, boolean jarg2);
  public final static native void BufferedPortImageFloat_write__SWIG_1(long jarg1, BufferedPortImageFloat jarg1_);
  public final static native void BufferedPortImageFloat_writeStrict(long jarg1, BufferedPortImageFloat jarg1_);
  public final static native void BufferedPortImageFloat_setStrict__SWIG_0(long jarg1, BufferedPortImageFloat jarg1_, boolean jarg2);
  public final static native void BufferedPortImageFloat_setStrict__SWIG_1(long jarg1, BufferedPortImageFloat jarg1_);
  public final static native long BufferedPortImageFloat_read__SWIG_0(long jarg1, BufferedPortImageFloat jarg1_, boolean jarg2);
  public final static native long BufferedPortImageFloat_read__SWIG_1(long jarg1, BufferedPortImageFloat jarg1_);
  public final static native long BufferedPortImageFloat_lastRead(long jarg1, BufferedPortImageFloat jarg1_);
  public final static native boolean BufferedPortImageFloat_isClosed(long jarg1, BufferedPortImageFloat jarg1_);
  public final static native void BufferedPortImageFloat_setReplier(long jarg1, BufferedPortImageFloat jarg1_, long jarg2, PortReader jarg2_);
  public final static native void BufferedPortImageFloat_onRead(long jarg1, BufferedPortImageFloat jarg1_, long jarg2, ImageFloat jarg2_);
  public final static native void BufferedPortImageFloat_useCallback__SWIG_0(long jarg1, BufferedPortImageFloat jarg1_, long jarg2, TypedReaderCallbackImageFloat jarg2_);
  public final static native void BufferedPortImageFloat_useCallback__SWIG_1(long jarg1, BufferedPortImageFloat jarg1_);
  public final static native boolean BufferedPortImageFloat_setEnvelope(long jarg1, BufferedPortImageFloat jarg1_, long jarg2, PortWriter jarg2_);
  public final static native boolean BufferedPortImageFloat_getEnvelope(long jarg1, BufferedPortImageFloat jarg1_, long jarg2, PortReader jarg2_);
  public final static native int BufferedPortImageFloat_getInputCount(long jarg1, BufferedPortImageFloat jarg1_);
  public final static native int BufferedPortImageFloat_getOutputCount(long jarg1, BufferedPortImageFloat jarg1_);
  public final static native void BufferedPortImageFloat_getReport(long jarg1, BufferedPortImageFloat jarg1_, long jarg2, PortReport jarg2_);
  public final static native void BufferedPortImageFloat_setReporter(long jarg1, BufferedPortImageFloat jarg1_, long jarg2, PortReport jarg2_);
  public final static native long BufferedPortImageFloat_acquire(long jarg1, BufferedPortImageFloat jarg1_);
  public final static native void BufferedPortImageFloat_release(long jarg1, BufferedPortImageFloat jarg1_, long jarg2);
  public final static native long SWIGPortableUpcast(long jarg1);
  public final static native long SWIGValueUpcast(long jarg1);
  public final static native long SWIGPropertyUpcast(long jarg1);
  public final static native long SWIGPortUpcast(long jarg1);
  public final static native long SWIGBottleUpcast(long jarg1);
  public final static native long SWIGPortReaderBufferBaseUpcast(long jarg1);
  public final static native long SWIGPortWriterWrapperUpcast(long jarg1);
  public final static native long SWIGImageUpcast(long jarg1);
  public final static native long SWIGFlexImageUpcast(long jarg1);
  public final static native long SWIGSoundUpcast(long jarg1);
  public final static native long SWIGDeviceDriverUpcast(long jarg1);
  public final static native long SWIGDeviceResponderUpcast(long jarg1);
  public final static native long SWIGPolyDriverUpcast(long jarg1);
  public final static native long SWIGBufferedPortPropertyUpcast(long jarg1);
  public final static native long SWIGBufferedPortBottleUpcast(long jarg1);
  public final static native long SWIGImageRgbUpcast(long jarg1);
  public final static native long SWIGBufferedPortImageRgbUpcast(long jarg1);
  public final static native long SWIGImageFloatUpcast(long jarg1);
  public final static native long SWIGBufferedPortImageFloatUpcast(long jarg1);
}
